"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9194],{24908:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var o=t(37592),i=t(62540),s=t(43023);const r={slug:"moon-v1.37",title:"moon v1.37 - Rust WASM toolchain and MCP support",authors:["milesj"],tags:["toolchain","wasm","plugin","rust","mcp","ai"],image:"./img/moon/v1.37.png"},a=void 0,l={image:t(55615).A,authorsImageUrls:[void 0]},c=[{value:"RFC: Task input additions and enhancements",id:"rfc-task-input-additions-and-enhancements",level:2},{value:"New Rust toolchain powered by WASM",id:"new-rust-toolchain-powered-by-wasm",level:2},{value:"New functionality",id:"new-functionality",level:3},{value:"MCP editor integration",id:"mcp-editor-integration",level:2},{value:"Supported tools",id:"supported-tools",level:3},{value:"Other changes",id:"other-changes",level:2},{value:"What&#39;s next?",id:"whats-next",level:2},{value:"Looking for toolchain contributors!",id:"looking-for-toolchain-contributors",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"In this release, we're stoked to release another WASM toolchain plugin, and experimental MCP/AI\nsupport!"}),"\n",(0,i.jsx)(n.h2,{id:"rfc-task-input-additions-and-enhancements",children:"RFC: Task input additions and enhancements"}),"\n",(0,i.jsxs)(n.p,{children:["We're planning to improve task inputs and have written up an\n",(0,i.jsx)(n.a,{href:"https://github.com/moonrepo/moon/issues/1985",children:"RFC to discuss these changes"}),". We'd appreciate any\nand all feedback!"]}),"\n",(0,i.jsx)(n.h2,{id:"new-rust-toolchain-powered-by-wasm",children:"New Rust toolchain powered by WASM"}),"\n",(0,i.jsxs)(n.p,{children:["With ",(0,i.jsx)(n.a,{href:"./moon-v1.36",children:"toolchain plugins"})," entering beta last release, it's only natural that we start\nmigrating the legacy toolchains into plugins. And with this release, the next one we've migrated is\nthe Rust toolchain! However, unlike the TypeScript toolchain, the new Rust toolchain is opt-in and\nmust be enabled. Simply rename ",(0,i.jsx)(n.code,{children:"rust"})," to ",(0,i.jsx)(n.code,{children:"unstable_rust"})," in ",(0,i.jsx)(n.code,{children:".moon/toolchain.yml"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml"',children:"unstable_rust:\n  version: '1.87.0'\n  components: ['clippy', 'rustfmt']\n  targets: ['wasm32-wasip1']\n  syncToolchainConfig: true\n"})}),"\n",(0,i.jsx)(n.h3,{id:"new-functionality",children:"New functionality"}),"\n",(0,i.jsx)(n.p,{children:"Although the new Rust toolchain is a one-to-one port, the WASM APIs provide far more flexibility and\nfunctionality than before. For example, the follow improvements and enhancements have been made:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The Cargo workspace can now exist at any folder depth and does not need to exist at the moon\nworkspace root. Additionally, because of this, we can now support multiple Cargo workspaces in the\nsame moon workspace."}),"\n",(0,i.jsxs)(n.li,{children:["Added a new ",(0,i.jsx)(n.code,{children:"addMsrvConstraint"})," setting, which will sync the version as a constraint to\n",(0,i.jsx)(n.code,{children:"Cargo.toml"})," under the ",(0,i.jsx)(n.code,{children:"workspace.package.rust-version"})," or ",(0,i.jsx)(n.code,{children:"package.rust-version"})," fields."]}),"\n",(0,i.jsxs)(n.li,{children:["Improved the accuracy of implicit project dependencies (inferred from ",(0,i.jsx)(n.code,{children:"Cargo.toml"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:["Improved the parsing of manifest (",(0,i.jsx)(n.code,{children:"Cargo.toml"}),") and lock (",(0,i.jsx)(n.code,{children:"Cargo.lock"}),") files. This information is\nthen fed into the task hashing process."]}),"\n",(0,i.jsxs)(n.li,{children:["Improved the Docker prune implementation by preserving all binaries (inferred from\n",(0,i.jsx)(n.code,{children:"cargo metadata"}),") while deleting the ",(0,i.jsx)(n.code,{children:"target"})," directory."]}),"\n",(0,i.jsxs)(n.li,{children:["Any ",(0,i.jsx)(n.code,{children:"cargo"})," or ",(0,i.jsx)(n.code,{children:"rustup"})," commands are now hashed and cached, and will only re-run when parameters\nchange. Unlike the current toolchain, which always runs these commands."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Quite a list of improvements, and this doesn't even include all the WASM / plugin improvements that\nhave been slowly introduced! Give this new toolchain a try, and let us know what you think!"}),"\n",(0,i.jsx)(n.h2,{id:"mcp-editor-integration",children:"MCP editor integration"}),"\n",(0,i.jsxs)(n.p,{children:["AI is all the rage these days, and even more so lately with the introduction of\n",(0,i.jsx)(n.a,{href:"https://modelcontextprotocol.io",children:"MCP"}),' (model context protocol) and agentic workflows. MCP is a new\nway for AI assistants to "understand" what\'s going on in your project without you having to explain\neverything. It works by feeding structured information, like in the context of moon, projects,\ntasks, and relationships, directly into AI models like GitHub Copilot or Cursor.']}),"\n",(0,i.jsx)(n.p,{children:"No more tedious explanations required! The AI can jump straight to helpful suggestions that actually\nwork in your codebase, saving you time, and making the whole experience much smoother, especially in\ncomplex monorepos with lots of moving parts."}),"\n",(0,i.jsxs)(n.p,{children:["To support agentic workflows, we're introducing an experimental ",(0,i.jsx)(n.a,{href:"/docs/commands/mcp",children:(0,i.jsx)(n.code,{children:"moon mcp"})}),"\ncommand, that starts an MCP server, and can be ",(0,i.jsx)(n.a,{href:"/docs/guides/mcp",children:"integrated into your editor"}),". For\nexample, VS Code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title=".vscode/mcp.json"',children:'{\n  "servers": {\n    "moon": {\n      "type": "stdio",\n      "command": "moon",\n      "args": ["mcp"],\n      "env": {\n        "MOON_WORKSPACE_ROOT": "${workspaceFolder}"\n      }\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"supported-tools",children:"Supported tools"}),"\n",(0,i.jsx)(n.p,{children:"Our MCP server currently supports the following tools. We'll be adding more tools in the future, so\nif you have any suggestions, please let us know!"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"get_project"})," - Get a project and its tasks by ",(0,i.jsx)(n.code,{children:"id"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"get_projects"})," - Get all projects."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"get_task"})," - Get a task by ",(0,i.jsx)(n.code,{children:"target"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"get_tasks"})," - Get all tasks."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"other-changes",children:"Other changes"}),"\n",(0,i.jsxs)(n.p,{children:["View the ",(0,i.jsx)(n.a,{href:"https://github.com/moonrepo/moon/releases/tag/v1.37.0",children:"official release"})," for a full list\nof changes."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Added ",(0,i.jsx)(n.code,{children:"environment.initializing"})," and ",(0,i.jsx)(n.code,{children:"environment.initialized"})," webhook events."]}),"\n",(0,i.jsxs)(n.li,{children:["Added ",(0,i.jsx)(n.code,{children:"root"})," and ",(0,i.jsx)(n.code,{children:"toolchain"})," fields to ",(0,i.jsx)(n.code,{children:"dependencies.installing"})," and ",(0,i.jsx)(n.code,{children:"dependencies.installed"}),"\nwebhook events."]}),"\n",(0,i.jsxs)(n.li,{children:["Updated proto to ",(0,i.jsx)(n.a,{href:"https://github.com/moonrepo/proto/releases/tag/v0.49.4",children:"v0.49.4"})," (from 0.49.1)."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"whats-next",children:"What's next?"}),"\n",(0,i.jsx)(n.p,{children:"With toolchains plugins being stabilized more, we'd like to focus on some other areas."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Better command line argument parsing/joining (especially for task ",(0,i.jsx)(n.code,{children:"args"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"Better child process I/O piping"}),"\n",(0,i.jsx)(n.li,{children:"Terminal notifications"}),"\n",(0,i.jsx)(n.li,{children:"WASM toolchain documentation"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"looking-for-toolchain-contributors",children:"Looking for toolchain contributors!"}),"\n",(0,i.jsx)(n.p,{children:"Now that the Rust toolchain has been ported to WASM, we'd like to start porting the other\ntoolchains, starting with Go and JavaScript (not Bun or Node.js), and also investigate supporting\ntoolchains for entirely new languages, like PHP and Ruby! If you're interested in contributing these\ntoolchains, please ping us in Discord!"}),"\n",(0,i.jsxs)(n.p,{children:["The only requirements is that these toolchains must be written in Rust and must exist in the\n",(0,i.jsx)(n.a,{href:"https://github.com/moonrepo/plugins",children:"moonrepo/plugins"})," repository!"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},37592:e=>{e.exports=JSON.parse('{"permalink":"/blog/moon-v1.37","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2025-06-03_moon-v1.37.mdx","source":"@site/blog/2025-06-03_moon-v1.37.mdx","title":"moon v1.37 - Rust WASM toolchain and MCP support","description":"In this release, we\'re stoked to release another WASM toolchain plugin, and experimental MCP/AI","date":"2025-06-03T00:00:00.000Z","tags":[{"inline":true,"label":"toolchain","permalink":"/blog/tags/toolchain"},{"inline":true,"label":"wasm","permalink":"/blog/tags/wasm"},{"inline":true,"label":"plugin","permalink":"/blog/tags/plugin"},{"inline":true,"label":"rust","permalink":"/blog/tags/rust"},{"inline":true,"label":"mcp","permalink":"/blog/tags/mcp"},{"inline":true,"label":"ai","permalink":"/blog/tags/ai"}],"readingTime":3.55,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.37","title":"moon v1.37 - Rust WASM toolchain and MCP support","authors":["milesj"],"tags":["toolchain","wasm","plugin","rust","mcp","ai"],"image":"./img/moon/v1.37.png"},"unlisted":false,"prevItem":{"title":"proto v0.50 - URL rewrites, on-init activation, preserved comments, and more","permalink":"/blog/proto-v0.50"},"nextItem":{"title":"moon v1.36 - Toolchain plugins beta, optimized remote caching, and codegen improvements","permalink":"/blog/moon-v1.36"}}')},43023:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(63696);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}},55615:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/v1.37-938d2f6633b41cbef7efb132836c814e.png"}}]);