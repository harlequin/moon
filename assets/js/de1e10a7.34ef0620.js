"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[51963],{39455:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>h});var i=o(40432),t=o(62540),s=o(43023),a=o(54703);const l={slug:"proto-v0.42",title:"proto v0.42 - New bin linking, JSON/YAML plugins, and more",authors:["milesj"],tags:["bin","link","strategy","json","yaml","plugin"],image:"./img/proto/v0.42.png"},r=void 0,d={image:o(98903).A,authorsImageUrls:[void 0]},h=[{value:"New bin linking strategy",id:"new-bin-linking-strategy",level:2},{value:"Support for JSON and YAML based plugins",id:"support-for-json-and-yaml-based-plugins",level:2},{value:"Other changes",id:"other-changes",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Happy Halloween \ud83c\udf83! In this release, we have a new bin linking strategy, and more schema plugin\nformats."}),"\n",(0,t.jsx)(n.h2,{id:"new-bin-linking-strategy",children:"New bin linking strategy"}),"\n",(0,t.jsxs)(n.p,{children:["Early on in proto's development, we added ",(0,t.jsx)(n.code,{children:"~/.proto/bin"})," symlink support for installed tools, but\nchose to base it on the versions globally pinned in ",(0,t.jsx)(n.code,{children:"~/.proto/.prototools"}),". We opted for this\napproach as there wasn't a better solution at the time, and we merely wanted an alternative to\nshims. Since then, bin linking has become an after-thought."]}),"\n",(0,t.jsxs)(n.p,{children:["However, a suggestion from ",(0,t.jsx)(n.a,{href:"https://github.com/meop",children:"@meop"})," sparked a great idea for the future of\nbin linking. Instead of symlinking bins based on versions pinned in ",(0,t.jsx)(n.code,{children:"~/.proto/.prototools"}),", bins are\nnow symlinked based on all of the versions installed, but grouped according to version ranges. The\nmain binary will always point to the highest installed version, while we also create binaries for\nthe highest major, and highest major + minor combinations."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, for Node.js (",(0,t.jsx)(n.code,{children:"node"}),"), we may have the following:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"~/.proto/bin/node"})," - Points to the highest version."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"~/.proto/bin/node-<major>"})," - Points to the highest version within that major range (",(0,t.jsx)(n.code,{children:"~major"}),"). Is\ncreated for each separate major version, for example: ",(0,t.jsx)(n.code,{children:"node-20"}),", ",(0,t.jsx)(n.code,{children:"node-22"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"~/.proto/bin/node-<major>.<minor>"})," - Points to the highest version within that major + minor\nrange (",(0,t.jsx)(n.code,{children:"~major.minor"}),"). Is created for each separate major + minor version, for example:\n",(0,t.jsx)(n.code,{children:"node-20.1"}),", ",(0,t.jsx)(n.code,{children:"node-22.4"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"~/.proto/bin/node-canary"})," - Points to a canary install, if it exists."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Thanks to this approach, you could easily execute commands with specific versions of a tool,\n",(0,t.jsx)(n.em,{children:"without"})," having to set environment variables, update configurations, or force overrides. Just\nexecute the binary directly!"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"$ node --version && which node\n23.1.0\n~/.proto/bin/node -> ~/.proto/tools/node/23.1.0/bin/node\n\n$ node-22 --version && which node-22\n22.5.1\n~/.proto/bin/node-22 -> ~/.proto/tools/node/22.5.1/bin/node\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["This change is not retroactive and will slowly be applied tool-by-tool when it is installed. To\nforce relinking of all binaries, you can use ",(0,t.jsx)(n.code,{children:"proto regen --bin"})," after upgrading."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"support-for-json-and-yaml-based-plugins",children:"Support for JSON and YAML based plugins"}),"\n",(0,t.jsx)(n.p,{children:"Support for TOML based plugins, an alternative to WASM based plugins, was integrated in proto v0.7;\nwhich is 35 versions ago! Since then, we've had great success with TOML plugins, as they represent\nabout 97% of all plugins in the registry. The other 3% is WASM of course."}),"\n",(0,t.jsx)(n.p,{children:"However, TOML is a configuration format that is quite unknown outside of the Rust ecosystem, and has\na bit of a learning curve for new users. To ease the plugin authoring process, we now support JSON\nand YAML based plugins! To demonstrate this, here's our official moon plugin in all 3 formats:"}),"\n",(0,t.jsx)(a.A,{title:"moon",data:{name:"moon",type:"cli",platform:{linux:{downloadFile:"moon-{arch}-unknown-linux-{libc}"},macos:{downloadFile:"moon-{arch}-apple-darwin"},windows:{downloadFile:"moon-{arch}-pc-windows-msvc.exe"}},install:{downloadUrl:"https://github.com/moonrepo/moon/releases/download/v{version}/{download_file}",downloadUrlCanary:"https://github.com/moonrepo/moon/releases/download/canary/{download_file}"},resolve:{gitUrl:"https://github.com/moonrepo/moon"},metadata:{selfUpgradeCommands:["upgrade"]}}}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"JSON and YAML use camelCase keys, while TOML uses kebab-case."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"other-changes",children:"Other changes"}),"\n",(0,t.jsxs)(n.p,{children:["View the ",(0,t.jsx)(n.a,{href:"https://github.com/moonrepo/proto/releases/tag/v0.42.0",children:"official release"})," for a full list\nof changes."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Each tool's primary executable file name is no longer based on the plugin's identifier, and is now\nbased on what's configured in the new ",(0,t.jsx)(n.code,{children:"LocateExecutablesOutput.exes"})," setting."]}),"\n",(0,t.jsx)(n.li,{children:"We now cache all text-based HTTP requests made from WASM plugins for 12 hours. This should greatly\nreduce the overhead cost of making requests, and will help for situations where an internet\nconnection is lost."}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},40432:e=>{e.exports=JSON.parse('{"permalink":"/blog/proto-v0.42","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-10-31_proto-v0.42.mdx","source":"@site/blog/2024-10-31_proto-v0.42.mdx","title":"proto v0.42 - New bin linking, JSON/YAML plugins, and more","description":"Happy Halloween \ud83c\udf83! In this release, we have a new bin linking strategy, and more schema plugin","date":"2024-10-31T00:00:00.000Z","tags":[{"inline":true,"label":"bin","permalink":"/blog/tags/bin"},{"inline":true,"label":"link","permalink":"/blog/tags/link"},{"inline":true,"label":"strategy","permalink":"/blog/tags/strategy"},{"inline":true,"label":"json","permalink":"/blog/tags/json"},{"inline":true,"label":"yaml","permalink":"/blog/tags/yaml"},{"inline":true,"label":"plugin","permalink":"/blog/tags/plugin"}],"readingTime":2.98,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.42","title":"proto v0.42 - New bin linking, JSON/YAML plugins, and more","authors":["milesj"],"tags":["bin","link","strategy","json","yaml","plugin"],"image":"./img/proto/v0.42.png"},"unlisted":false,"prevItem":{"title":"moon v1.30 - Python support, self-hosted remote caching, task graph, and more!","permalink":"/blog/moon-v1.30"},"nextItem":{"title":"moon v1.29 - Improved affected tracking, experimental Pkl configuration, and more","permalink":"/blog/moon-v1.29"}}')},54703:(e,n,o)=>{o.d(n,{A:()=>p});var i=o(41605),t=o.n(i),s=o(28334),a=o(27124),l=o(35562),r=o(22491),d=o(78296),h=o(62540);function c(e,n){const o={};return Object.entries(e).forEach((e=>{let[i,s]=e;const a="arch"===n||"exes"===n?i:t()(i);o[a]=s&&"object"==typeof s&&!Array.isArray(s)?c(s,i):s})),o}function p(e){let{data:n={},title:o}=e;return(0,h.jsxs)(d.A,{groupId:"non-wasm-type",defaultValue:"toml",values:[{label:"JSON",value:"json"},{label:"TOML",value:"toml"},{label:"YAML",value:"yaml"}],children:[(0,h.jsx)(r.A,{value:"json",children:(0,h.jsx)(l.default,{language:"json",title:`${o}.json`,children:JSON.stringify(n,null,2)})}),(0,h.jsx)(r.A,{value:"toml",children:(0,h.jsx)(l.default,{language:"toml",title:`${o}.toml`,children:s.Ay.stringify(c(n))})}),(0,h.jsx)(r.A,{value:"yaml",children:(0,h.jsx)(l.default,{language:"yaml",title:`${o}.yaml`,children:a.Ay.stringify(n,{defaultKeyType:"PLAIN",defaultStringType:"QUOTE_SINGLE"})})})]})}},98903:(e,n,o)=>{o.d(n,{A:()=>i});const i=o.p+"assets/images/v0.42-4811100012dfdae1b49c8b48ef7d53e2.png"}}]);