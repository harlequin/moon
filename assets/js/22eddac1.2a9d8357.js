"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[30289],{36607:e=>{e.exports=JSON.parse('{"permalink":"/blog/proto-v0.7","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-04-21_proto-v0.7.mdx","source":"@site/blog/2023-04-21_proto-v0.7.mdx","title":"proto v0.7 - First step towards plugins","description":"With this release, we\'re very excited to announce our initial support for plugins in proto!","date":"2023-04-21T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"plugins","permalink":"/blog/tags/plugins"}],"readingTime":2.59,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.7","title":"proto v0.7 - First step towards plugins","authors":["milesj"],"tags":["proto","plugins"],"image":"./img/proto/v0.7.png"},"unlisted":false,"prevItem":{"title":"moon v1.3 - Advanced run targeting and an official proto plugin","permalink":"/blog/moon-v1.3"},"nextItem":{"title":"moon v1.2 - Tag based task inheritance","permalink":"/blog/moon-v1.2"}}')},43023:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>a});var t=o(63696);const i={},l=t.createContext(i);function s(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(l.Provider,{value:n},e.children)}},88301:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>t,toc:()=>c});var t=o(36607),i=o(62540),l=o(43023);const s={slug:"proto-v0.7",title:"proto v0.7 - First step towards plugins",authors:["milesj"],tags:["proto","plugins"],image:"./img/proto/v0.7.png"},a=void 0,r={image:o(94970).A,authorsImageUrls:[void 0]},c=[{value:"Initial plugins architecture",id:"initial-plugins-architecture",level:2},{value:"TOML plugins",id:"toml-plugins",level:3},{value:"Cleaning improvements",id:"cleaning-improvements",level:2}];function p(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"With this release, we're very excited to announce our initial support for plugins in proto!"}),"\n",(0,i.jsx)(n.h2,{id:"initial-plugins-architecture",children:"Initial plugins architecture"}),"\n",(0,i.jsxs)(n.p,{children:["Last week we posted an ",(0,i.jsx)(n.a,{href:"./proto-v0.6#rfc-plugins-system",children:"RFC for a new plugins architecture"})," for\nproto. We believe plugins will unlock an array of capabilities for proto, will enable the community\nto add their own custom integrations, and the ability for tools to be managed within proto's\ntoolchain."]}),"\n",(0,i.jsxs)(n.p,{children:["We were very excited for this RFC, and couldn't wait, so we spent the last week prototyping\nimplementations. We got the basics of downloading, installing, and enabling a plugin at ",(0,i.jsx)(n.em,{children:"runtime"}),"\nworking incredibly fast. However, implementing the entire RFC in 1 release would have taken too\nlong, and we wanted to avoid dropping such a large feature in a single release. Because of this,\nwe've only implemented ",(0,i.jsx)(n.a,{href:"/docs/proto/non-wasm-plugin",children:"TOML plugins"})," in this release, and will\nimplement WASM plugins in a future release."]}),"\n",(0,i.jsx)(n.h3,{id:"toml-plugins",children:"TOML plugins"}),"\n",(0,i.jsx)(n.p,{children:"You may be asking yourself, aren't plugins typically code? For the most part, yes, but after\nbuilding a \"version manager\" for multiple languages, we've come to the realization that many tools\ncan simply be supported through a basic configuration file."}),"\n",(0,i.jsx)(n.p,{children:"At minimum, tools require the following pieces to be managed:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Where and how to download the tool"}),"\n",(0,i.jsx)(n.li,{children:"How to install/unpack the tool"}),"\n",(0,i.jsx)(n.li,{children:"How to resolve available versions to install"}),"\n",(0,i.jsx)(n.li,{children:"How to execute the tool's binary"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["All 4 of these pieces can be solved with a configuration file, and as such, we opted to support a\n",(0,i.jsx)(n.a,{href:"/docs/proto/non-wasm-plugin",children:"TOML schema based plugin"})," as an alternative to a code based plugin.\nThe other benefits of a schema is that it's ",(0,i.jsx)(n.em,{children:"easy to write, read, and maintain"}),", doesn't require any\ncode, and doesn't force you into a specific programming language."]}),"\n",(0,i.jsxs)(n.p,{children:["To demonstrate how this plugin works, here's an example of a ",(0,i.jsx)(n.a,{href:"/moon",children:"moon"})," TOML schema."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'title="moon-schema.toml"',children:'name = "moon"\ntype = "cli"\n\n[platform.linux]\ndownload-file = "moon-{arch}-unknown-linux-{libc}"\n\n[platform.macos]\ndownload-file = "moon-{arch}-apple-darwin"\n\n[platform.windows]\ndownload-file = "moon-{arch}-pc-windows-msvc.exe"\n\n[install]\ndownload-url = "https://github.com/moonrepo/moon/releases/download/v{version}/{download_file}"\n\n[resolve]\ngit-url = "https://github.com/moonrepo/moon"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Very simple right? With this, you can now configure moon as a plugin within proto."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'title=".prototools"',children:'moon = "1.2.0"\n\n[plugins]\nmoon = "source:./path/to/moon-schema.toml"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["And ultimately manage every version of moon through proto! Because moon is now a plugin, every\ncommand in proto that accepts a ",(0,i.jsx)(n.code,{children:"<tool>"})," argument, will now accept ",(0,i.jsx)(n.code,{children:"moon"})," as a valid tool."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"$ proto install moon 1.2.0\n$ proto list-remote moon\n$ proto use\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Learn more about ",(0,i.jsx)(n.a,{href:"/docs/proto/plugins",children:"TOML plugins in the official docs"}),"!"]}),"\n",(0,i.jsx)(n.h2,{id:"cleaning-improvements",children:"Cleaning improvements"}),"\n",(0,i.jsxs)(n.p,{children:["Last week we introduced the ",(0,i.jsx)(n.a,{href:"/docs/proto/commands/clean",children:(0,i.jsx)(n.code,{children:"proto clean"})})," command that will\nautomatically delete stale and unused tools from the toolchain. This week we've implemented a few\nimprovements to the cleaning process:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Added a ",(0,i.jsx)(n.code,{children:"--yes"})," option to ",(0,i.jsx)(n.a,{href:"/docs/proto/commands/clean",children:(0,i.jsx)(n.code,{children:"proto clean"})}),", allowing prompts to be\nbypassed."]}),"\n",(0,i.jsxs)(n.li,{children:["Added a ",(0,i.jsx)(n.code,{children:"auto-clean"})," setting to ",(0,i.jsx)(n.code,{children:"~/.proto/config.toml"}),", enabling automatic cleaning when\n",(0,i.jsx)(n.a,{href:"/docs/proto/commands/use",children:(0,i.jsx)(n.code,{children:"proto use"})})," is ran."]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},94970:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/v0.7-a86209ab88fb0d3b882a64bedb0fe971.png"}}]);