"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[45063],{9535:e=>{e.exports=JSON.parse('{"permalink":"/blog/proto-v0.3","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-03-15_proto-v0.3.mdx","source":"@site/blog/2023-03-15_proto-v0.3.mdx","title":"proto v0.3 - Improved npm, go, and version requirement support","description":"With this release, we\'re improving some workflows and version detection logic based on initial","date":"2023-03-15T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"npm","permalink":"/blog/tags/npm"},{"inline":true,"label":"go","permalink":"/blog/tags/go"}],"readingTime":1.36,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.3","title":"proto v0.3 - Improved npm, go, and version requirement support","authors":["milesj"],"tags":["proto","npm","go"],"image":"./img/proto/v0.3.png"},"unlisted":false,"prevItem":{"title":"moon v1.0 - Official release! Project constraints, tagging, and more!","permalink":"/blog/moon-v1.0"},"nextItem":{"title":"moon v0.26 - Deeper proto integration, Docker setup, and query commands","permalink":"/blog/v0.26"}}')},43023:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>l});var t=o(63696);const i={},s=t.createContext(i);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(s.Provider,{value:n},e.children)}},56457:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>d});var t=o(9535),i=o(62540),s=o(43023);const r={slug:"proto-v0.3",title:"proto v0.3 - Improved npm, go, and version requirement support",authors:["milesj"],tags:["proto","npm","go"],image:"./img/proto/v0.3.png"},l=void 0,a={image:o(67166).A,authorsImageUrls:[void 0]},d=[{value:"Bundled npm support",id:"bundled-npm-support",level:2},{value:"Automatic <code>GOBIN</code> setup",id:"automatic-gobin-setup",level:2},{value:"Better version requirement detection",id:"better-version-requirement-detection",level:2}];function c(e){const n={blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"With this release, we're improving some workflows and version detection logic based on initial\nfeedback."}),"\n",(0,i.jsx)(n.h2,{id:"bundled-npm-support",children:"Bundled npm support"}),"\n",(0,i.jsxs)(n.p,{children:["After Node.js is installed, the version of npm that came bundled with that Node.js version will also\nbe installed into proto. This functionality can be skipped by passing ",(0,i.jsx)(n.code,{children:"--no-bundled-npm"})," during\ninstallation."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"$ proto install node -- --no-bundled-npm\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To further expand upon this, ",(0,i.jsx)(n.code,{children:"bundled"})," is now considered a built-in alias, and will be used during\nversion detection. When encountered, we'll first detect the version of Node.js running, and infer\nthe npm version from there."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"$ proto global npm bundled\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Only supported by proto, not moon."}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"automatic-gobin-setup",children:["Automatic ",(0,i.jsx)(n.code,{children:"GOBIN"})," setup"]}),"\n",(0,i.jsxs)(n.p,{children:["After Go is installed, we'll now inject a ",(0,i.jsx)(n.code,{children:"GOBIN"})," environment variable into your shell, pointing to\n",(0,i.jsx)(n.code,{children:"~/go/bin"}),", if it doesn't already exist. This variable will be used to locate Go binaries across all\ninstalled versions, and help to avoid binary not found errors."]}),"\n",(0,i.jsxs)(n.p,{children:["This functionality can be skipped by passing ",(0,i.jsx)(n.code,{children:"--no-gobin"})," during installation."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"$ proto install go -- --no-gobin\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Only supported by proto, not moon."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"better-version-requirement-detection",children:"Better version requirement detection"}),"\n",(0,i.jsxs)(n.p,{children:["Previously when proto encountered a version requirement (",(0,i.jsx)(n.code,{children:"^"}),", ",(0,i.jsx)(n.code,{children:"~"}),", ",(0,i.jsx)(n.code,{children:">="}),", etc) during version\ndetection, we would attempt to resolve a version that satisfied the requirement based on versions\navailable in the remote manifest (what's been officially released). While this worked, it would\nresult in far too many local installs as that satisfied version constantly changed."]}),"\n",(0,i.jsxs)(n.p,{children:["Instead, we now satisfy the version requirement based on versions that have been installed locally\nto ",(0,i.jsx)(n.code,{children:"~/.proto/tools"}),". If no version matches, detection will simply move on to the next case, and\neventually fallback to the global default version."]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},67166:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/v0.3-327da652b09512c04488c3e94ae70c17.png"}}]);