"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[75335],{8243:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/v1.28-4addf57f0bb11b8a97361e545e042855.png"},39037:e=>{e.exports=JSON.parse('{"permalink":"/blog/moon-v1.28","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-09-02_moon-v1.28.mdx","source":"@site/blog/2024-09-02_moon-v1.28.mdx","title":"moon v1.28 - Task presets, OS tasks, meta tokens, and more","description":"In this release, we\'ve focused on developer experience and quality-of-life improvements.","date":"2024-09-02T00:00:00.000Z","tags":[{"inline":true,"label":"os","permalink":"/blog/tags/os"},{"inline":true,"label":"task","permalink":"/blog/tags/task"},{"inline":true,"label":"meta","permalink":"/blog/tags/meta"},{"inline":true,"label":"token","permalink":"/blog/tags/token"},{"inline":true,"label":"toolchain","permalink":"/blog/tags/toolchain"},{"inline":true,"label":"preset","permalink":"/blog/tags/preset"}],"readingTime":4.76,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.28","title":"moon v1.28 - Task presets, OS tasks, meta tokens, and more","authors":["milesj"],"tags":["os","task","meta","token","toolchain","preset"],"image":"./img/moon/v1.28.png"},"unlisted":false,"prevItem":{"title":"moon v1.29 - Improved affected tracking, experimental Pkl configuration, and more","permalink":"/blog/moon-v1.29"},"nextItem":{"title":"proto v0.40 - Config mode, progress bars, and more","permalink":"/blog/proto-v0.40"}}')},43023:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(63696);const o={},i=s.createContext(o);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},70151:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var s=t(39037),o=t(62540),i=t(43023);const a={slug:"moon-v1.28",title:"moon v1.28 - Task presets, OS tasks, meta tokens, and more",authors:["milesj"],tags:["os","task","meta","token","toolchain","preset"],image:"./img/moon/v1.28.png"},r=void 0,l={image:t(8243).A,authorsImageUrls:[void 0]},c=[{value:"New task presets",id:"new-task-presets",level:2},{value:"New OS specific tasks",id:"new-os-specific-tasks",level:2},{value:"New <code>@meta</code> token function",id:"new-meta-token-function",level:2},{value:"New <code>disallowRunInCiMismatch</code> experiment",id:"new-disallowrunincimismatch-experiment",level:2},{value:"Other changes",id:"other-changes",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"In this release, we've focused on developer experience and quality-of-life improvements."}),"\n",(0,o.jsx)(n.h2,{id:"new-task-presets",children:"New task presets"}),"\n",(0,o.jsxs)(n.p,{children:["For the longest time, moon has supported the ",(0,o.jsx)(n.a,{href:"/docs/config/project#local",children:(0,o.jsx)(n.code,{children:"local"})}),' setting for\ntasks. This setting was added early on to reduce the amount of options configuration necessary for\ntasks that "should only run locally". However, after years of supporting this setting, we\'ve\ndiscovered a few short-comings with it:']}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:'The name is confusing. It\'s not apparent what "local" really means for newcomers.'}),"\n",(0,o.jsxs)(n.li,{children:["This setting also changes non-local related options, like ",(0,o.jsx)(n.code,{children:"persistent"})," and ",(0,o.jsx)(n.code,{children:"cache"}),", which isn't\napparent to the user."]}),"\n",(0,o.jsxs)(n.li,{children:["Setting the value to ",(0,o.jsx)(n.code,{children:"false"})," doesn't inverse the options values. For example, enabling ",(0,o.jsx)(n.code,{children:"runInCI"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:['At this point we thought to ourselves "how can we improve this experience?". Instead of reworking\n',(0,o.jsx)(n.code,{children:"local"}),", we've opted to introduce a new task setting called ",(0,o.jsx)(n.a,{href:"/docs/config/project#preset",children:(0,o.jsx)(n.code,{children:"preset"})}),",\nwhich configures a collection of task options, and deprecate the ",(0,o.jsx)(n.code,{children:"local"})," setting. Presets are a much\nbetter pattern, as it allows us to support multiple presets, and uniquely name our presets. For\nexample, old ",(0,o.jsx)(n.code,{children:"local"})," tasks can be rewritten as such:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'title="moon.yml"',children:"# Before\ntasks:\n  start:\n    command: 'vite dev'\n    local: true\n\n# After\ntasks:\n  start:\n    command: 'vite dev'\n    preset: 'server'\n"})}),"\n",(0,o.jsxs)(n.p,{children:["To start, we're introducing 2 presets: ",(0,o.jsx)(n.code,{children:"server"})," and ",(0,o.jsx)(n.code,{children:"watcher"}),". Check out the\n",(0,o.jsx)(n.a,{href:"/docs/config/project#preset",children:"documentation for more information"})," on what these presets configure!\nIf you have ideas for other presets, we would love to hear them."]}),"\n",(0,o.jsx)(n.h2,{id:"new-os-specific-tasks",children:"New OS specific tasks"}),"\n",(0,o.jsx)(n.p,{children:"When moon was originally designed, it was meant to be a very simple but easily configurable task\nrunner. But since then, moon has grown drastically, and so has the requirements of its users. One\nsuch request was being able to define tasks that only run for certain operating systems."}),"\n",(0,o.jsxs)(n.p,{children:["This wasn't possible before; but is now thanks to the new\n",(0,o.jsxs)(n.a,{href:"/docs/config/project#os",children:[(0,o.jsx)(n.code,{children:"os"})," task option"]}),'. This option can be configured with "linux", "macos", or\n"windows" to target those specific systems, and can be a single value, or list of values.']}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'title="moon.yml"',children:"tasks:\n  build-linux:\n    command: 'cargo build --target x86_64-unknown-linux-gnu'\n    options:\n      os: 'linux'\n  build-macos:\n    command: 'cargo build --target x86_64-apple-darwin'\n    options:\n      os: 'macos'\n  build-windows:\n    command: 'cargo build --target x86_64-pc-windows-msvc'\n    options:\n      os: 'windows'\n"})}),"\n",(0,o.jsx)(n.p,{children:"When a task is ran on a non-compatible system, it will be converted to a no-operation task, so that\ndependency chains still resolve correctly."}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"In the future, we will look into supporting system architecture as well."}),"\n"]}),"\n",(0,o.jsxs)(n.h2,{id:"new-meta-token-function",children:["New ",(0,o.jsx)(n.code,{children:"@meta"})," token function"]}),"\n",(0,o.jsxs)(n.p,{children:["In our last release, we introduced the ",(0,o.jsx)(n.a,{href:"/docs/config/project#metadata-1",children:(0,o.jsx)(n.code,{children:"project.metadata"})})," setting\nas a means for consumers to define their own metadata. This is great but it provided no other\nbenefit, as it required consumers to open up config files to discover this metadata, or consumers to\nwrite custom abstractions/tooling. We want to improve the integration of this information within\nmoon, so to start, we're introducing a new token function ",(0,o.jsx)(n.a,{href:"/docs/concepts/token#meta",children:(0,o.jsx)(n.code,{children:"@meta(key)"})}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.a,{href:"/docs/concepts/token#meta",children:(0,o.jsx)(n.code,{children:"@meta(key)"})})," token function can be used to access project metadata\nfrom both the ",(0,o.jsx)(n.a,{href:"/docs/config/project#project",children:(0,o.jsx)(n.code,{children:"project"})})," and\n",(0,o.jsx)(n.a,{href:"/docs/config/project#metadata-1",children:(0,o.jsx)(n.code,{children:"project.metadata"})})," settings. The former values will be used\nas-is, while the latter values will be JSON stringified (since consumers can define anything)."]}),"\n",(0,o.jsx)(n.p,{children:"With this new token, our task composition has grown even deeper. For example, you can define a task\nat the top-level that a project inherits, and then define metadata within that project for the task!\nWith that said, this is more of a stopgap solution until we support true variables within\nconfiguration."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/tasks.yml"',children:"tasks:\n  build:\n    script: 'compile --label @meta(name) --compress @meta(compression)'\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'title="<project>/moon.yml"',children:"project:\n  name: 'example'\n  metadata:\n    compression: 9\n"})}),"\n",(0,o.jsxs)(n.p,{children:["And lastly, while we're on the topic of tokens, we're also introducing ",(0,o.jsx)(n.code,{children:"$projectName"}),",\n",(0,o.jsx)(n.code,{children:"$projectChannel"}),", and ",(0,o.jsx)(n.code,{children:"$projectOwner"})," token variables, as an easier alternative solution."]}),"\n",(0,o.jsxs)(n.h2,{id:"new-disallowrunincimismatch-experiment",children:["New ",(0,o.jsx)(n.code,{children:"disallowRunInCiMismatch"})," experiment"]}),"\n",(0,o.jsxs)(n.p,{children:["Have you ever ran ",(0,o.jsx)(n.a,{href:"/docs/commands/ci",children:(0,o.jsx)(n.code,{children:"moon ci"})})," in CI and encountered a scenario where tasks that\n",(0,o.jsx)(n.em,{children:"should"})," have run didn't run? Or the dependency of a task never runs causing the dependent to fail?\nIf so, this may apply to you!"]}),"\n",(0,o.jsxs)(n.p,{children:["This scenario is most likely caused by an invalid relationship where the dependent is\n",(0,o.jsx)(n.a,{href:"/docs/config/project#runinci",children:(0,o.jsx)(n.code,{children:"runInCI"})})," enabled, but the dependency is\n",(0,o.jsx)(n.a,{href:"/docs/config/project#runinci",children:(0,o.jsx)(n.code,{children:"runInCI"})})," disabled. For example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yml",metastring:'title="moon.yml"',children:"tasks:\n  build:\n    # ...\n    options:\n      runInCI: false\n\n  analyze:\n    # ...\n    deps: ['build']\n    options:\n      runInCI: true\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Because ",(0,o.jsx)(n.code,{children:"build"})," is disabled, its outputs may not be created. Additionally, if ",(0,o.jsx)(n.code,{children:"build"})," is affected by\ntouched files, the ",(0,o.jsx)(n.code,{children:"analyze"})," task will not run automatically unless it was also affected. We try our\nbest to accommodate these scenarios and \"detect\" when things should run or not, but it's fallible,\nas there's many ways that tasks can relate to each other."]}),"\n",(0,o.jsxs)(n.p,{children:["To try and remedy this going forward, we're introducing the new ",(0,o.jsx)(n.code,{children:"disallowRunInCiMismatch"})," experiment\nthat will ",(0,o.jsx)(n.em,{children:"hard error"})," if an invalid relationship is configured. We want to try and capture how\noften users are configuring this, whether intentionally or accidentally. If the error becomes a\nblocker, the experiment can be disabled as so:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/workspace.yml"',children:"experiments:\n  disallowRunInCiMismatch: false\n"})}),"\n",(0,o.jsx)(n.h2,{id:"other-changes",children:"Other changes"}),"\n",(0,o.jsxs)(n.p,{children:["View the ",(0,o.jsx)(n.a,{href:"https://github.com/moonrepo/moon/releases/tag/v1.28.0",children:"official release"})," for a full list\nof changes."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"We've sunset the CI insights feature in moonbase. We will no longer be tracking CI run history.\nThis is a retroactive change that applies to all moon versions."}),"\n",(0,o.jsxs)(n.li,{children:["Added ",(0,o.jsx)(n.code,{children:"codeowners.requiredApprovals"})," setting to ",(0,o.jsx)(n.code,{children:".moon/workspace.yml"}),", that will apply\nrequirements to all paths."]}),"\n",(0,o.jsx)(n.li,{children:"Updated the terminal checkpoint (4 squares) colors to better reflect their state."}),"\n",(0,o.jsxs)(n.li,{children:["Updated ",(0,o.jsx)(n.code,{children:"MOON_TOOLCHAIN_FORCE_GLOBALS"})," to support filtering by tool IDs, instead of applying to\neverything."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);