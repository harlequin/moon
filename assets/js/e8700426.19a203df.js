"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[72669],{195:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/v0.6-54cd6a41ee17e956623325a956645c66.png"},10901:(e,n,t)=>{t.d(n,{A:()=>s});var o=t(62540);function s(e){let{src:n,width:t="90%",alt:s="",title:i,align:l="center",padding:r="1rem"}=e;return(0,o.jsx)("div",{style:{marginBottom:r,marginTop:r,textAlign:l},children:(0,o.jsx)("img",{src:n.default,width:t,alt:s,title:i,className:"inline-block"})})}},43023:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var o=t(63696);const s={},i=o.createContext(s);function l(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),o.createElement(i.Provider,{value:n},e.children)}},69281:(e,n,t)=>{t.r(n),t.d(n,{default:()=>o});const o=t.p+"assets/images/v0.6-errors-429f778ecbebbe5bdab9fb9328490928.png"},76140:e=>{e.exports=JSON.parse('{"permalink":"/blog/proto-v0.6","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-04-13_proto-v0.6.mdx","source":"@site/blog/2023-04-13_proto-v0.6.mdx","title":"proto v0.6 - Unused cleaning and improved global binaries","description":"With this release, we\'re expanding on our global binary support and providing quality of life","date":"2023-04-13T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"globals","permalink":"/blog/tags/globals"},{"inline":true,"label":"clean","permalink":"/blog/tags/clean"},{"inline":true,"label":"errors","permalink":"/blog/tags/errors"}],"readingTime":2.62,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.6","title":"proto v0.6 - Unused cleaning and improved global binaries","authors":["milesj"],"tags":["proto","globals","clean","errors"],"image":"./img/proto/v0.6.png"},"unlisted":false,"prevItem":{"title":"moon v1.2 - Tag based task inheritance","permalink":"/blog/moon-v1.2"},"nextItem":{"title":"proto v0.5 - Version aliasing and global binaries","permalink":"/blog/proto-v0.5"}}')},87369:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var o=t(76140),s=t(62540),i=t(43023),l=t(44338),r=t(10901);const a={slug:"proto-v0.6",title:"proto v0.6 - Unused cleaning and improved global binaries",authors:["milesj"],tags:["proto","globals","clean","errors"],image:"./img/proto/v0.6.png"},d=void 0,c={image:t(195).A,authorsImageUrls:[void 0]},p=[{value:"RFC: Plugins system",id:"rfc-plugins-system",level:2},{value:"Cleaning stale and unused tools",id:"cleaning-stale-and-unused-tools",level:2},{value:"Global binary improvements",id:"global-binary-improvements",level:2},{value:"Better error messages",id:"better-error-messages",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"With this release, we're expanding on our global binary support and providing quality of life\nimprovements."}),"\n",(0,s.jsx)(n.h2,{id:"rfc-plugins-system",children:"RFC: Plugins system"}),"\n",(0,s.jsxs)(n.p,{children:["Since proto's inception, plugins have been top of mind, but runtime based plugins in Rust are\n",(0,s.jsx)(n.em,{children:"difficult"}),". The only viable solution to this problem is WASM, but most developers have never used\nWASM before, nor are they familiar with WASM tooling (myself included)."]}),"\n",(0,s.jsx)(n.p,{children:"However, we're at a point in proto's life-cycle where the core is rather stable, and it's time to\nstart investigating plugin support. To this end, we've introduced a small RFC outlining how plugins\nwill be used, enabled, and implemented. It's not very in-depth as we want to avoid implementation\ndetails, but from a consumers perspective, we want to ensure that it makes sense."}),"\n",(0,s.jsx)(n.p,{children:"We'd very much appreciate it if you could take a look at the RFC and provide feedback. If you have\nany experience in Rust runtime plugins, we'd love to hear your thoughts as well."}),"\n",(0,s.jsx)("div",{class:"flex justify-center",children:(0,s.jsx)(l.A,{label:"View RFC",href:"https://github.com/moonrepo/proto/issues/73",size:"lg"})}),"\n",(0,s.jsx)(n.h2,{id:"cleaning-stale-and-unused-tools",children:"Cleaning stale and unused tools"}),"\n",(0,s.jsxs)(n.p,{children:["Is your ",(0,s.jsx)(n.code,{children:"~/.proto"})," installation growing out of control? Are there old versions of tools that you\ndon't use anymore? Or versions you never used? Unsure if you're using a tool at all or still need\nit?"]}),"\n",(0,s.jsxs)(n.p,{children:["To help avoid these questions and problems, we're introducing a new command that will uninstall\nstale and unused tools, ",(0,s.jsx)(n.a,{href:"/docs/proto/commands/clean",children:(0,s.jsx)(n.code,{children:"proto clean"})}),". When ran, the command will\nlaunch an interactive session and scan the file system for old tools, prompting you to remove them."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"$ proto clean\n"})}),"\n",(0,s.jsxs)(n.p,{children:["By default the command will uninstall tools that haven't been used in over 30 days, but this can be\ncustomized with the ",(0,s.jsx)(n.code,{children:"--days"})," option."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"Tools installed before v0.6 will most likely be considered stale, as we weren't tracking install and\nlast used timestamps. However, everything will work as intended after running a tool or simply\nmoving forward from this point."})}),"\n",(0,s.jsx)(n.h2,{id:"global-binary-improvements",children:"Global binary improvements"}),"\n",(0,s.jsxs)(n.p,{children:["In our ",(0,s.jsx)(n.a,{href:"./proto-v0.5",children:"previous release"}),", we announced the ",(0,s.jsx)(n.code,{children:"proto install-global"})," command for\ninstalling global dependencies that are unique per tool. Thanks to the community, this command has\nbeen updated to support installing multiple globals at once!"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"$ proto install-global node typescript webpack-cli\n"})}),"\n",(0,s.jsxs)(n.p,{children:["On top of this, we're also introducing another command that was requested by the community,\n",(0,s.jsx)(n.code,{children:"proto list-global"}),", that can be used to list all currently installed globals."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"$ proto list-global node\ntsc - ~/.proto/tools/node/globals/lib/node_modules/typescript/bin/tsc\ntsserver - ~/.proto/tools/node/globals/lib/node_modules/typescript/bin/tsserver\n"})}),"\n",(0,s.jsx)(n.h2,{id:"better-error-messages",children:"Better error messages"}),"\n",(0,s.jsxs)(n.p,{children:["We've spent most of the past week working on a new internal architecture called\n",(0,s.jsx)(n.a,{href:"https://github.com/moonrepo/starbase",children:"Starbase"}),", which will be the new foundation for proto and\nmoon moving forward. One of the major benefits of this new architecture is a rewritten error system\nthat provides more context and better error messages."]}),"\n",(0,s.jsx)(n.p,{children:"Here's an example of this, albeit with a contrived situation:"}),"\n",(0,s.jsx)(r.A,{src:t(69281),width:"90%"})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);