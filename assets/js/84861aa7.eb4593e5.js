"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[83007],{43023:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(63696);const a={},i=s.createContext(a);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:n},e.children)}},81032:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"guides/wasm-plugins","title":"WASM plugins","description":"moon and proto plugins can be written in","source":"@site/docs/guides/wasm-plugins.mdx","sourceDirName":"guides","slug":"/guides/wasm-plugins","permalink":"/docs/guides/wasm-plugins","draft":false,"unlisted":false,"editUrl":"https://github.com/moonrepo/moon/tree/master/website/docs/guides/wasm-plugins.mdx","tags":[],"version":"current","frontMatter":{"title":"WASM plugins","toc_max_heading_level":5},"sidebar":"guides","previous":{"title":"Terminal notifications","permalink":"/docs/guides/notifications"},"next":{"title":"Webhooks (experimental)","permalink":"/docs/guides/webhooks"}}');var a=t(62540),i=t(43023);const r={title:"WASM plugins",toc_max_heading_level:5},o=void 0,l={},d=[{value:"Powered by Extism",id:"powered-by-extism",level:2},{value:"Concepts",id:"concepts",level:2},{value:"Plugin identifier",id:"plugin-identifier",level:3},{value:"Virtual paths",id:"virtual-paths",level:3},{value:"File system caveats",id:"file-system-caveats",level:4},{value:"Host environment",id:"host-environment",level:3},{value:"Host functions &amp; macros",id:"host-functions--macros",level:3},{value:"Converting paths",id:"converting-paths",level:4},{value:"Environment variables",id:"environment-variables",level:4},{value:"Executing commands",id:"executing-commands",level:4},{value:"Sending requests",id:"sending-requests",level:4},{value:"Logging",id:"logging",level:4},{value:"Configuring plugin locations",id:"configuring-plugin-locations",level:2},{value:"<code>file</code>",id:"file",level:3},{value:"<code>github</code>",id:"github",level:3},{value:"<code>https</code>",id:"https",level:3},{value:"Creating a plugin",id:"creating-a-plugin",level:2},{value:"Building and publishing",id:"building-and-publishing",level:2},{value:"Building, optimizing, and stripping",id:"building-optimizing-and-stripping",level:3},{value:"Manually create releases",id:"manually-create-releases",level:3},{value:"Automate releases",id:"automate-releases",level:3}];function h(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/moon",children:"moon"})," and ",(0,a.jsx)(n.a,{href:"/proto",children:"proto"})," plugins can be written in\n",(0,a.jsx)(n.a,{href:"https://webassembly.org/",children:"WebAssembly (WASM)"}),", a portable binary format. This means that plugins\ncan be written in any language that compiles to WASM, like Rust, C, C++, Go, TypeScript, and more.\nBecause WASM based plugins are powered by a programming language, they implicitly support complex\nbusiness logic and behavior, have access to a sandboxed file system (via WASI), can execute child\nprocesses, and much more."]}),"\n",(0,a.jsx)(n.admonition,{type:"danger",children:(0,a.jsx)(n.p,{children:"Since our WASM plugin implementations are still experimental, expect breaking changes to occur in\nnon-major releases."})}),"\n",(0,a.jsx)(n.h2,{id:"powered-by-extism",children:"Powered by Extism"}),"\n",(0,a.jsxs)(n.p,{children:["Our WASM plugin system is powered by ",(0,a.jsx)(n.a,{href:"https://extism.org/",children:"Extism"}),", a Rust-based cross-language\nframework for building WASM plugins under a unified guest and host API. Under the hood, Extism uses\n",(0,a.jsx)(n.a,{href:"https://wasmtime.dev/",children:"wasmtime"})," as its WASM runtime."]}),"\n",(0,a.jsxs)(n.p,{children:["For the most part, you do ",(0,a.jsx)(n.em,{children:"not"})," need to know about Extism's host SDK, as we have implemented the\nbulk of it within moon and proto directly. However, you ",(0,a.jsx)(n.em,{children:"should"})," be familiar with the guest PDKs, as\nthis is what you'll be using to implement Rust-based plugins. We suggest reading the following\nmaterial:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://extism.org/docs/concepts/pdk",children:"Plugin development kits"})," (PDKs)"]}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.a,{href:"https://github.com/extism/rust-pdk",children:"extism-pdk"})," Rust crate"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://extism.org/docs/concepts/host-functions",children:"Host functions"})," (how they work)"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"concepts",children:"Concepts"}),"\n",(0,a.jsx)(n.p,{children:"Before we begin, let's talk about a few concepts that are critical to WASM and our plugin systems."}),"\n",(0,a.jsx)(n.h3,{id:"plugin-identifier",children:"Plugin identifier"}),"\n",(0,a.jsxs)(n.p,{children:["When implementing plugin functions, you'll need to access information about the current plugin. To\nget the current plugin identifier (the key the plugin was configured with), use the\n",(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_pdk/latest/warpgate_pdk/fn.get_plugin_id.html",children:(0,a.jsx)(n.code,{children:"get_plugin_id"})})," function."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"let id = get_plugin_id();\n"})}),"\n",(0,a.jsx)(n.h3,{id:"virtual-paths",children:"Virtual paths"}),"\n",(0,a.jsxs)(n.p,{children:["WASM by default does not have access to the host file system, but through ",(0,a.jsx)(n.a,{href:"https://wasi.dev/",children:"WASI"}),",\nwe can provide sandboxed access to a pre-defined list of allowed directories. We call these\n",(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_api/latest/warpgate_api/enum.VirtualPath.html",children:"virtual paths"}),", and all\npaths provided via function input or context use them."]}),"\n",(0,a.jsx)(n.p,{children:"Virtual paths are implemented by mapping a real path (host machine) to a virtual path (guest\nruntime) using file path prefixes. The following prefixes are currently supported:"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Real path"}),(0,a.jsx)(n.th,{children:"Virtual path"}),(0,a.jsx)(n.th,{children:"Only for"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"~"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"/userhome"})}),(0,a.jsx)(n.td,{children:"~"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"~/.proto"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"/proto"})}),(0,a.jsx)(n.td,{children:"~"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"~/.moon"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"/moon"})}),(0,a.jsx)(n.td,{children:"moon"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Working directory"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"/cwd"})}),(0,a.jsx)(n.td,{children:"~"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"moon workspace"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"/workspace"})}),(0,a.jsx)(n.td,{children:"moon"})]})]})]}),"\n",(0,a.jsxs)(n.p,{children:["For example, from the context of WASM, you may have a virtual path of ",(0,a.jsx)(n.code,{children:"/proto/tools/node/1.2.3"}),",\nwhich simply maps back to ",(0,a.jsx)(n.code,{children:"~/.proto/tools/node/1.2.3"})," on the host machine. However, this should\nalmost always be transparent to you, the developer, and to end users."]}),"\n",(0,a.jsxs)(n.p,{children:["However, there may be a few cases where you need access to the real path from WASM, for example,\nlogging or executing commands. For this, the real path can be accessed with the\n",(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_api/latest/warpgate_api/enum.VirtualPath.html#method.real_path",children:(0,a.jsx)(n.code,{children:"real_path"})}),"\nfunction on the ",(0,a.jsx)(n.code,{children:"VirtualPath"})," enum (this is a Rust only feature)."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"virtual_path.real_path();\n"})}),"\n",(0,a.jsx)(n.h4,{id:"file-system-caveats",children:"File system caveats"}),"\n",(0,a.jsx)(n.p,{children:"When working with the file system from the context of WASM, there are a few caveats to be aware of."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["All ",(0,a.jsx)(n.code,{children:"fs"})," calls must use the virtual path. Real paths will error."]}),"\n",(0,a.jsx)(n.li,{children:"Paths not white listed (using prefixes above) will error."}),"\n",(0,a.jsxs)(n.li,{children:["Changing file permissions is not supported (on Unix and Windows).","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"This is because WASI does not support this."}),"\n",(0,a.jsx)(n.li,{children:"This also means operations like unpacking archives is not possible."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"host-environment",children:"Host environment"}),"\n",(0,a.jsxs)(n.p,{children:["Since WASM executes in its own runtime, it ",(0,a.jsx)(n.em,{children:"does not"})," have access to the current host operating\nsystem, architecture, so on and so forth. To bridge this gap, we provide the\n",(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_pdk/latest/warpgate_pdk/fn.get_host_environment.html",children:(0,a.jsx)(n.code,{children:"get_host_environment"})}),"\nfunction.\n",(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_pdk/latest/warpgate_pdk/struct.HostEnvironment.html",children:"Learn more about this type"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"let env = get_host_environment()?;\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The host operating system and architecture can be accessed with ",(0,a.jsx)(n.code,{children:"os"})," and ",(0,a.jsx)(n.code,{children:"arch"})," fields respectively.\nBoth fields are an enum in Rust, or a string in other languages."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"if env.os == HostOS::Windows {\n    // Windows only\n}\n\nif env.arch == HostArch::Arm64 {\n    // aarch64 only\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Furthermore, the user's home directory (",(0,a.jsx)(n.code,{children:"~"}),") can be accessed with the ",(0,a.jsx)(n.code,{children:"home_dir"})," field, which is a\n",(0,a.jsx)(n.a,{href:"#virtual-paths",children:"virtual path"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"if env.home_dir.join(some_path).exists() {\n    // Do something\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"host-functions--macros",children:"Host functions & macros"}),"\n",(0,a.jsx)(n.p,{children:"WASM is pretty powerful but it can't do everything since it's sandboxed. To work around this, we\nprovide a mechanism known as host functions, which are functions that are implemented on the host\n(in Rust), and can be executed from WASM. The following host functions are currently available:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_pdk/latest/warpgate_pdk/macro.exec_command.html",children:(0,a.jsx)(n.code,{children:"exec_command"})})," -\nExecute a system command on the host machine, with a provided list of arguments or environment\nvariables."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_pdk/latest/warpgate_pdk/macro.real_path.html",children:(0,a.jsx)(n.code,{children:"from_virtual_path"})})," -\nConverts a virtual path into a real path."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_pdk/latest/warpgate_pdk/macro.host_env.html",children:(0,a.jsx)(n.code,{children:"get_env_var"})})," - Get an\nenvironment variable value from the host environment."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_pdk/latest/warpgate_pdk/macro.host_log.html",children:(0,a.jsx)(n.code,{children:"host_log"})})," - Log an\nstdout, stderr, or tracing message to the host's terminal."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_pdk/latest/warpgate_pdk/macro.send_request.html",children:(0,a.jsx)(n.code,{children:"send_request"})})," -\nRequests a URL on the host machine using a Rust-based HTTP client (not WASM)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_pdk/latest/warpgate_pdk/macro.host_env.html",children:(0,a.jsx)(n.code,{children:"set_env_var"})})," - Set an\nenvironment variable to the host environment."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_pdk/latest/warpgate_pdk/macro.virtual_path.html",children:(0,a.jsx)(n.code,{children:"to_virtual_path"})})," -\nConverts a real path into a virtual path."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["To use host functions, you'll need to make them available by registering them at the top of your\nRust file (only add the functions you want to use) using the\n",(0,a.jsx)(n.a,{href:"https://crates.io/crates/extism-pdk",children:"extism-pdk"})," crate."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'use extism_pdk::*;\n\n#[host_fn]\nextern "ExtismHost" {\n    fn exec_command(input: Json<ExecCommandInput>) -> Json<ExecCommandOutput>;\n    fn from_virtual_path(path: String) -> String;\n    fn get_env_var(key: String) -> String;\n    fn host_log(input: Json<HostLogInput>);\n    fn send_request(input: Json<SendRequestInput>) -> Json<SendRequestOutput>;\n    fn set_env_var(key: String, value: String);\n    fn to_virtual_path(path: String) -> Json<VirtualPath>;\n}\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsx)(n.p,{children:"To simplify development, we provide built-in functions and macros for the host functions above.\nContinue reading for more information on these macros."})}),"\n",(0,a.jsx)(n.h4,{id:"converting-paths",children:"Converting paths"}),"\n",(0,a.jsxs)(n.p,{children:["When working with virtual paths, you may need to convert them to real paths, and vice versa. The\n",(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_pdk/latest/warpgate_pdk/fn.into_virtual_path.html",children:(0,a.jsx)(n.code,{children:"into_virtual_path"})}),"\nand ",(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_pdk/latest/warpgate_pdk/fn.into_real_path.html",children:(0,a.jsx)(n.code,{children:"into_real_path"})}),"\nfunctions can be used for such situations, which use the ",(0,a.jsx)(n.code,{children:"to_virtual_path"})," and ",(0,a.jsx)(n.code,{children:"from_virtual_path"}),"\nhost functions respectively."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'// Supports strings or paths\nlet virt = into_virtual_path("/some/real/path")?;\nlet real = into_real_path(PathBuf::from("/some/virtual/path"))?;\n'})}),"\n",(0,a.jsx)(n.h4,{id:"environment-variables",children:"Environment variables"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_pdk/latest/warpgate_pdk/fn.get_host_env_var.html",children:(0,a.jsx)(n.code,{children:"get_host_env_var"})}),"\nand ",(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_pdk/latest/warpgate_pdk/fn.set_host_env_var.html",children:(0,a.jsx)(n.code,{children:"set_host_env_var"})}),"\nfunctions can be used to read and write environment variables on the host, using the ",(0,a.jsx)(n.code,{children:"set_env_var"}),"\nand ",(0,a.jsx)(n.code,{children:"get_env_var"})," host functions respectively."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'// Set a value\nset_host_env_var("ENV_VAR", "value")?;\n\n// Get a value (returns an `Option`)\nlet value = get_host_env_var("ENV_VAR")?;\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Additionally, the\n",(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_pdk/latest/warpgate_pdk/fn.add_host_paths.html",children:(0,a.jsx)(n.code,{children:"add_host_paths"})})," function\ncan be used to append paths to the ",(0,a.jsx)(n.code,{children:"PATH"})," environment variable."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'// Append to path\nadd_host_paths(["/userhome/some/virtual/path"])?;\n'})}),"\n",(0,a.jsx)(n.h4,{id:"executing-commands",children:"Executing commands"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_pdk/latest/warpgate_pdk/macro.exec_command.html",children:(0,a.jsx)(n.code,{children:"exec_command!"})}),"\nmacro can be used to execute a command on the host, using the ",(0,a.jsx)(n.code,{children:"exec_command"})," host function. If the\ncommand does not exist on ",(0,a.jsx)(n.code,{children:"PATH"}),", an error is thrown. This macros supports three modes: pipe,\ninherit, and raw (returns ",(0,a.jsx)(n.code,{children:"Result"}),")."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'let result = exec_command!(raw, "which", ["node"]);\n'})}),"\n",(0,a.jsxs)(n.p,{children:["If you want a simpler API, the\n",(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_pdk/latest/warpgate_pdk/fn.exec.html",children:(0,a.jsx)(n.code,{children:"exec"})}),",\n",(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_pdk/latest/warpgate_pdk/fn.exec_captured.html",children:(0,a.jsx)(n.code,{children:"exec_captured"})})," (pipe),\nand ",(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_pdk/latest/warpgate_pdk/fn.exec_streamed.html",children:(0,a.jsx)(n.code,{children:"exec_streamed"})}),"\n(inherit) functions can be used."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'// Pipe stdout/stderr\nlet output = exec_captured("which", ["node"])?;\n\n// Inherit stdout/stderr\nexec_streamed("npm", ["install"])?;\n\n// Full control\nexec(ExecCommandInput {\n    command: "npm".into(),\n    args: vec!["install".into()],\n    ..ExecCommandInput::default()\n})?;\n'})}),"\n",(0,a.jsx)(n.h4,{id:"sending-requests",children:"Sending requests"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_pdk/latest/warpgate_pdk/macro.send_request.html",children:(0,a.jsx)(n.code,{children:"send_request"})})," macro\ncan be used to request a URL on the host, instead of from WASM, allowing it to use the same HTTP\nclient as the host CLI. This macro returns a response object, with the raw body in bytes, and the\nstatus code."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'let response = send_request!("https://some.com/url/to/fetch");\n\nif response.status == 200 {\n  let json = response.json::<T>()?;\n  let text = response.text()?;\n} else {\n  // Error!\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["To simplify the handling of requests -> responses, we also provide the\n",(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_pdk/latest/warpgate_pdk/fn.fetch_bytes.html",children:(0,a.jsx)(n.code,{children:"fetch_bytes"})}),",\n",(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_pdk/latest/warpgate_pdk/fn.fetch_json.html",children:(0,a.jsx)(n.code,{children:"fetch_json"})}),", and\n",(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_pdk/latest/warpgate_pdk/fn.fetch_text.html",children:(0,a.jsx)(n.code,{children:"fetch_text"})})," functions."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'let json: T = fetch_json("https://some.com/url/to/fetch.json")?;\n'})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Only GET requests are supported."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"logging",children:"Logging"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_pdk/latest/warpgate_pdk/macro.host_log.html",children:(0,a.jsx)(n.code,{children:"host_log!"})})," macro can be\nused to write stdout or stderr messages to the host's terminal, using the ",(0,a.jsx)(n.code,{children:"host_log"})," host function.\nIt supports the same argument patterns as ",(0,a.jsx)(n.code,{children:"format!"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["If you want full control, like providing data/fields, use the input mode and provide\n",(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate_pdk/latest/warpgate_pdk/struct.HostLogInput.html",children:(0,a.jsx)(n.code,{children:"HostLogInput"})}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'host_log!(stdout, "Some message");\nhost_log!(stderr, "Some message with {}", "args");\n\n// With data\nhost_log!(input, HostLogInput {\n    message: "Some message with data".into(),\n    data: HashMap::from_iter([\n        ("data".into(), serde_json::to_value(data)?),\n    ]),\n    target: HostLogTarget::Stderr,\n});\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Furthermore, the ",(0,a.jsx)(n.a,{href:"https://crates.io/crates/extism-pdk",children:"extism-pdk"})," crate provides a handful of\nmacros for writing level-based messages that'll appear in the host's terminal when ",(0,a.jsx)(n.code,{children:"--log"})," is\nenabled in the CLI. These also support arguments."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'debug!("This is a debug message");\ninfo!("Something informational happened");\nwarn!("Proceed with caution");\nerror!("Oh no, something went wrong");\n'})}),"\n",(0,a.jsx)(n.h2,{id:"configuring-plugin-locations",children:"Configuring plugin locations"}),"\n",(0,a.jsxs)(n.p,{children:["To use a WASM plugin, it'll need to be configured in both moon and proto. Luckily both tools use a\nsimilar approach for configuring plugins called the\n",(0,a.jsx)(n.a,{href:"https://docs.rs/warpgate/latest/warpgate/enum.PluginLocator.html",children:"plugin locator"}),". A locator string\nis composed of 2 parts separated by ",(0,a.jsx)(n.code,{children:"://"}),", the former is the protocol, and the latter is the\nlocation."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-toml",children:'"<protocol>://<location>"\n'})}),"\n",(0,a.jsx)(n.p,{children:"The following locator patterns are supported:"}),"\n",(0,a.jsx)(n.h3,{id:"file",children:(0,a.jsx)(n.code,{children:"file"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"file://"})," protocol represents a file path, either absolute or relative (from the current\nconfiguration file)."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-toml",children:'# Relative\n"file://./path/to/example.wasm"\n\n# Absolute\n"file:///root/path/to/example.wasm"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"github",children:(0,a.jsx)(n.code,{children:"github"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"github://"})," protocol can be used to target and download an asset from a specific GitHub release.\nThe location must be an organization + repository slug (owner/repo), and the release ",(0,a.jsx)(n.em,{children:"must have"})," a\n",(0,a.jsx)(n.code,{children:".wasm"})," asset available to download."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-toml",children:'"github://moonrepo/example-repo"\n'})}),"\n",(0,a.jsxs)(n.p,{children:["If you are targeting releases in a monorepo, you can append the project name after the repository.\nThe project name will be used as a prefix for tags, and will match ",(0,a.jsx)(n.code,{children:"<name>@v?<version>"})," or\n",(0,a.jsx)(n.code,{children:"<name>-v?<version>"})," based tags."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-toml",children:'"github://moonrepo/example-repo/project-name"\n'})}),"\n",(0,a.jsx)(n.p,{children:"By default, the latest release will be used and cached for 7 days. If you'd prefer to target a\nspecific release (preferred), append the release tag to the end of the location."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-toml",children:'"github://moonrepo/example-repo@v1.2.3"\n'})}),"\n",(0,a.jsxs)(n.p,{children:["This strategy is powered by the ",(0,a.jsx)(n.a,{href:"https://api.github.com/",children:"GitHub API"})," and is subject to rate\nlimiting. If running in a CI environment, we suggesting setting a ",(0,a.jsx)(n.code,{children:"GITHUB_TOKEN"})," environment\nvariable to authorize API requests with. If using GitHub Actions, it's as simple as:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"# In some job or step...\nenv:\n  GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'\n"})}),"\n",(0,a.jsx)(n.h3,{id:"https",children:(0,a.jsx)(n.code,{children:"https"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"https://"})," protocol is your standard URL, and must point to an absolute file path. Files will be\ndownloaded to ",(0,a.jsx)(n.code,{children:"~/.moon/plugins"})," or ",(0,a.jsx)(n.code,{children:"~/.proto/plugins"}),". Non-secure URLs are ",(0,a.jsx)(n.em,{children:"not supported"}),"!"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-toml",children:'"https://domain.com/path/to/plugins/example.wasm"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"creating-a-plugin",children:"Creating a plugin"}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["Although plugins can be written in any language that compiles to WASM, we've only tested Rust. The\nrest of this article assume you're using Rust and Cargo! Refer to ",(0,a.jsx)(n.a,{href:"https://extism.org/",children:"Extism"}),"'s\ndocumentation for other examples."]})}),"\n",(0,a.jsx)(n.p,{children:"To start, create a new crate with Cargo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"cargo new plugin --lib\ncd plugin\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Set the lib type to ",(0,a.jsx)(n.code,{children:"cdylib"}),", and provide other required settings."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-toml",metastring:'title="Cargo.toml"',children:'[package]\nname = "example_plugin"\nversion = "0.0.1"\nedition = "2024"\npublish = false\n\n[lib]\ncrate-type = [\'cdylib\']\n\n[profile.release]\ncodegen-units = 1\ndebug = false\nlto = true\nopt-level = "s"\npanic = "abort"\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Our Rust plugins are powered by ",(0,a.jsx)(n.a,{href:"https://extism.org/",children:"Extism"}),", so lets add their PDK and ours as a\ndependency."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"cargo add extism-pdk\n\n# For proto\ncargo add proto_pdk\n\n# For moon\ncargo add moon_pdk\n"})}),"\n",(0,a.jsx)(n.p,{children:"In all Rust files, we can import all the PDKs with the following:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",metastring:'title="src/lib.rs"',children:"use extism_pdk::*;\n"})}),"\n",(0,a.jsxs)(n.p,{children:["We can then build the WASM binary. The file will be available at\n",(0,a.jsx)(n.code,{children:"target/wasm32-wasip1/debug/<name>.wasm"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"cargo build --target wasm32-wasip1\n"})}),"\n",(0,a.jsx)(n.h2,{id:"building-and-publishing",children:"Building and publishing"}),"\n",(0,a.jsxs)(n.p,{children:["At this point, you should have a fully working WASM plugin, but to make it available to the\ncommunity, you'll still need to build and make the ",(0,a.jsx)(n.code,{children:".wasm"})," file available. The easiest solution is\nto publish a GitHub release and include the ",(0,a.jsx)(n.code,{children:".wasm"})," file as an asset."]}),"\n",(0,a.jsx)(n.h3,{id:"building-optimizing-and-stripping",children:"Building, optimizing, and stripping"}),"\n",(0,a.jsxs)(n.p,{children:["WASM files are pretty fat, even when compiling in release mode. To reduce the size of these files,\nwe can use ",(0,a.jsx)(n.code,{children:"wasm-opt"})," and ",(0,a.jsx)(n.code,{children:"wasm-strip"}),", both of which are provided by the\n",(0,a.jsx)(n.a,{href:"https://github.com/WebAssembly",children:"WebAssembly"})," group. The following script is what we use to build\nour own plugins."]}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["This functionality is natively supported in our\n",(0,a.jsx)(n.a,{href:"https://github.com/moonrepo/build-wasm-plugin",children:"moonrepo/build-wasm-plugin"})," GitHub Action!"]})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",metastring:'title="build-wasm"',children:'#!/usr/bin/env bash\n\ntarget="${CARGO_TARGET_DIR:-target}"\ninput="$target/wasm32-wasip1/release/$1.wasm"\noutput="$target/wasm32-wasip1/$1.wasm"\n\necho "Building"\n\ncargo build --target wasm32-wasip1 --release\n\necho "Optimizing"\n\n# https://github.com/WebAssembly/binaryen\n~/binaryen/bin/wasm-opt -Os "$input" --output "$output"\n\necho "Stripping"\n\n# https://github.com/WebAssembly/wabt\n~/wabt/bin/wasm-strip "$output"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"manually-create-releases",children:"Manually create releases"}),"\n",(0,a.jsx)(n.p,{children:"When your plugin is ready to be published, you can create a release on GitHub using the following\nsteps."}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Tag the release and push to GitHub."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"git tag v0.0.1\ngit push --tags\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsxs)(n.li,{children:["Build a release version of the plugin using the ",(0,a.jsx)(n.code,{children:"build-wasm"})," script above. The file will be\navailable at ",(0,a.jsx)(n.code,{children:"target/wasm32-wasip1/<name>.wasm"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"build-wasm <name>\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"3",children:["\n",(0,a.jsx)(n.li,{children:"In GitHub, navigate to the tags page, find the new tag, create a new release, and attach the\nbuilt file as an asset."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"automate-releases",children:"Automate releases"}),"\n",(0,a.jsxs)(n.p,{children:["If you're using GitHub Actions, you can automate the release process with our official\n",(0,a.jsx)(n.a,{href:"https://github.com/moonrepo/build-wasm-plugin",children:"moonrepo/build-wasm-plugin"})," action."]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Create a new workflow file at ",(0,a.jsx)(n.code,{children:".github/workflows/release.yml"}),". Refer to the link above for a\nworking example."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Tag the release and push to GitHub."}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"# In a polyrepo\ngit tag v0.0.1\n\n# In a monorepo\ngit tag example_plugin-v0.0.1\n\n# Push the tags\ngit push --tags\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"3",children:["\n",(0,a.jsx)(n.li,{children:"The action will automatically build the plugin, create a release, and attach the built file as an\nasset."}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}}}]);