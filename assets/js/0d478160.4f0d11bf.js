"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[75079],{9493:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/v1.17-32598c00a24548408b97a60ac8f58c34.png"},30015:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>a});var o=t(34966),s=t(62540),i=t(43023);const r={slug:"moon-v1.17",title:"moon v1.17 - Full Bun support, TypeScript improvements, and more!",authors:["milesj"],tags:["bun","typescript","javascript"],image:"./img/moon/v1.17.png"},l=void 0,c={image:t(9493).A,authorsImageUrls:[void 0]},a=[{value:"Bun tier 1, 2, and 3 support",id:"bun-tier-1-2-and-3-support",level:2},{value:"TypeScript improvements",id:"typescript-improvements",level:2},{value:"Configure the root directory",id:"configure-the-root-directory",level:3},{value:"Include shared types",id:"include-shared-types",level:3},{value:"Include sources of project references",id:"include-sources-of-project-references",level:3},{value:"JavaScript improvements",id:"javascript-improvements",level:2},{value:"Supporting the &quot;single version policy&quot; pattern",id:"supporting-the-single-version-policy-pattern",level:3},{value:"Other changes",id:"other-changes",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"In this release, we've focused heavily on the JavaScript and TypeScript ecosystems, by improving our\nimplementations, and providing full Bun support."}),"\n",(0,s.jsx)(n.h2,{id:"bun-tier-1-2-and-3-support",children:"Bun tier 1, 2, and 3 support"}),"\n",(0,s.jsxs)(n.p,{children:["Yes you read that right! Not just 1 tier, not just 2 tiers, but all 3 language tiers have been\nimplemented for Bun, providing ",(0,s.jsx)(n.a,{href:"/docs/how-it-works/languages",children:"full language support"}),", and parity\nwith Node.js. Thanks to the Bun work in ",(0,s.jsx)(n.a,{href:"/proto",children:"proto"})," and the previous\n",(0,s.jsx)(n.a,{href:"./moon-v1.16",children:"v1.16 release"}),", we were able to add full Bun support with relative easy."]}),"\n",(0,s.jsxs)(n.p,{children:["So what does Bun support look like? To start, you can now configure a\n",(0,s.jsx)(n.a,{href:"/docs/config/toolchain#bun",children:(0,s.jsx)(n.code,{children:"bun"})})," setting in ",(0,s.jsx)(n.a,{href:"/docs/config/toolchain",children:(0,s.jsx)(n.code,{children:".moon/toolchain.yml"})}),",\nincluding an optional ",(0,s.jsx)(n.code,{children:"version"})," to download and install, and settings similar to Node.js."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml"',children:"bun:\n  version: '1.0.13'\n  syncProjectWorkspaceDependencies: true\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This will enable the ",(0,s.jsx)(n.code,{children:"bun"})," platform and the following integrations are applied:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Will automatically download and install Bun for the configured version."}),"\n",(0,s.jsxs)(n.li,{children:["Will install dependencies using ",(0,s.jsx)(n.code,{children:"bun install"})," (deduping currently not supported)."]}),"\n",(0,s.jsxs)(n.li,{children:["Will parse ",(0,s.jsx)(n.code,{children:"bun.lockb"})," for dependency resolution and task hashing."]}),"\n",(0,s.jsxs)(n.li,{children:["Will use ",(0,s.jsx)(n.code,{children:"bunx"})," instead of ",(0,s.jsx)(n.code,{children:"npx"})," for one-off package executions."]}),"\n",(0,s.jsxs)(n.li,{children:["Can execute ",(0,s.jsx)(n.code,{children:"bun"})," commands within tasks."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["With the ",(0,s.jsx)(n.code,{children:"bun"})," platform enabled, you can now configure the platform for projects and tasks (is\nautomatically detected when running the ",(0,s.jsx)(n.code,{children:"bun"})," or ",(0,s.jsx)(n.code,{children:"bunx"})," commands)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="<project>/moon.yml"',children:"# Default platform for all tasks (optional)\nplatform: 'bun'\n\ntasks:\n  dev:\n    command: 'bun run dev'\n  test:\n    command: 'bun test'\n  lint:\n    command: 'eslint .'\n    # Only required for npm packages (if not defined above)\n    platform: 'bun'\n"})}),"\n",(0,s.jsx)(n.h2,{id:"typescript-improvements",children:"TypeScript improvements"}),"\n",(0,s.jsx)(n.h3,{id:"configure-the-root-directory",children:"Configure the root directory"}),"\n",(0,s.jsx)(n.p,{children:"When moon was first designed, it was designed for JavaScript based monorepos. Because of this, there\nwere a handful of assumptions that still exist today, one of which is that the moon workspace root\nwas assumed to be the JavaScript and TypeScript root. The root is extremely important in resolving\nrelative paths for project references and other path based functionality, so using the workspace\nroot made the most sense."}),"\n",(0,s.jsxs)(n.p,{children:["However, what if your TypeScript root isn't the workspace root? Or the TypeScript root and\nJavaScript root are different? Well, you were out of luck... until now! We're introducing a new\nsetting called ",(0,s.jsx)(n.a,{href:"/docs/config/toolchain#root",children:(0,s.jsx)(n.code,{children:"typescript.root"})}),", that denotes the root directory for\nTypeScript related functionality (relative from moon's workspace root)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml"',children:"typescript:\n  root: './typescript'\n"})}),"\n",(0,s.jsx)(n.h3,{id:"include-shared-types",children:"Include shared types"}),"\n",(0,s.jsxs)(n.p,{children:["Another common TypeScript practice is to have shared ",(0,s.jsx)(n.code,{children:".d.ts"})," types that are used across multiple\nprojects, or to augment third-party types. This is so common that we felt obligated to support it in\nsome capacity within moon. With that said, we're introducing a new setting,\n",(0,s.jsx)(n.a,{href:"/docs/config/toolchain#includesharedtypes",children:(0,s.jsx)(n.code,{children:"typescript.includeSharedTypes"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml"',children:"typescript:\n  includeSharedTypes: true\n"})}),"\n",(0,s.jsxs)(n.p,{children:["When enabled, we'll automatically sync the shared types path to the ",(0,s.jsx)(n.code,{children:"include"})," field of all relevant\nproject ",(0,s.jsx)(n.code,{children:"tsconfig.json"}),"s. However, for this to work correctly, the shared types ",(0,s.jsx)(n.em,{children:"must"})," exist in a\n",(0,s.jsx)(n.code,{children:"types"})," folder relative from the ",(0,s.jsx)(n.a,{href:"#configure-the-root-directory",children:"TypeScript root"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, if the TypeScript root is ",(0,s.jsx)(n.code,{children:"/"}),", and shared types is ",(0,s.jsx)(n.code,{children:"/types"}),", then all packages in\n",(0,s.jsx)(n.code,{children:"/packages/*"})," will be updated with the following:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="packages/example/tsconfig.json"',children:'{\n  "include": ["../../types/**/*"]\n}\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"This setting can be overridden on a per-project basis."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"include-sources-of-project-references",children:"Include sources of project references"}),"\n",(0,s.jsxs)(n.p,{children:["Continuing with ",(0,s.jsx)(n.code,{children:"include"})," related functionality, we've introducing yet another new setting,\n",(0,s.jsx)(n.a,{href:"/docs/config/toolchain#includeprojectreferencesources",children:(0,s.jsx)(n.code,{children:"typescript.includeProjectReferenceSources"})}),",\nwhich does exactly as its name implies. It automatically appends the sources (",(0,s.jsx)(n.code,{children:"**/*"}),") of all project\nreferences to the ",(0,s.jsx)(n.code,{children:"include"})," field of all relevant project ",(0,s.jsx)(n.code,{children:"tsconfig.json"}),"s."]}),"\n",(0,s.jsx)(n.p,{children:"This is useful (and sometimes required) for the following reasons:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'It makes files within a referenced project available for import into the consuming project. This\nis required for "press tab to auto-import" nested/deep files, otherwise only index imports will\nwork (and barrel files are costly).'}),"\n",(0,s.jsx)(n.li,{children:"It also improves the editor experience by making the source files available for intellisense,\nautocomplete, and other features."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml"',children:"typescript:\n  includeProjectReferenceSources: true\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To understand this functionality, say you have a project with the following ",(0,s.jsx)(n.code,{children:"tsconfig.json"}),", and\nthis project depends on 2 other projects: ui and utils."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="packages/example/tsconfig.json"',children:'{\n  "compilerOptions": {},\n  "include": ["src/**/*"]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"When our syncing process occurs, we'll automatically sync project references, and include referenced\nsources, like so."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="packages/example/tsconfig.json"',children:'{\n  "compilerOptions": {},\n  "include": ["src/**/*", "../ui/**/*", "../utils/**/*"],\n  "references": [{ "path": "../ui" }, { "path": "../utils" }]\n}\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"This setting can also be overridden on a per-project basis."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"javascript-improvements",children:"JavaScript improvements"}),"\n",(0,s.jsx)(n.h3,{id:"supporting-the-single-version-policy-pattern",children:'Supporting the "single version policy" pattern'}),"\n",(0,s.jsxs)(n.p,{children:["If you're unfamiliar with the single version policy, or the one version rule, it's a pattern that\nonly allows dependencies to be configured in a single location, typically the root ",(0,s.jsx)(n.code,{children:"package.json"}),".\nThis pattern forces ",(0,s.jsx)(n.em,{children:"all"})," projects in a monorepo to use the same dependencies, and avoid the package\n",(0,s.jsx)(n.code,{children:"workspaces"})," functionality."]}),"\n",(0,s.jsxs)(n.p,{children:["This pattern was previously not possible in moon, as our automatic dependency installation process\ndid not account for it, and it would either install in the root if using ",(0,s.jsx)(n.code,{children:"workspaces"}),", or in a\nproject otherwise. To support this pattern, we're introducing the new setting\n",(0,s.jsx)(n.a,{href:"/docs/config/toolchain#rootpackageonly",children:(0,s.jsx)(n.code,{children:"node.rootPackageOnly"})})," for Node.js, and\n",(0,s.jsx)(n.code,{children:"bun.rootPackageOnly"})," for Bun."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml"',children:"node:\n  rootPackageOnly: true\n"})}),"\n",(0,s.jsxs)(n.p,{children:["When enabled, we'll only install dependencies in the workspace root, regardless of other settings or\nhow ",(0,s.jsx)(n.code,{children:"package.json"}),"s are configured. However, this setting ",(0,s.jsx)(n.em,{children:"does not"})," verify that other\n",(0,s.jsx)(n.code,{children:"package.json"}),"s ",(0,s.jsx)(n.em,{children:"do not"})," have dependencies. It's up to you to ensure that other ",(0,s.jsx)(n.code,{children:"package.json"}),"s do\nnot have dependencies."]}),"\n",(0,s.jsx)(n.h2,{id:"other-changes",children:"Other changes"}),"\n",(0,s.jsxs)(n.p,{children:["View the ",(0,s.jsx)(n.a,{href:"https://github.com/moonrepo/moon/releases/tag/v1.17.0",children:"official release"})," for a full list\nof changes."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Updated automatic dependency linking to use the ",(0,s.jsx)(n.code,{children:"build"})," scope instead of ",(0,s.jsx)(n.code,{children:"peer"})," scope. This should\nalleviate some of the pain points with ",(0,s.jsx)(n.code,{children:"package.json"})," syncing."]}),"\n",(0,s.jsx)(n.li,{children:"Improved project reference syncing and edge case handling."}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},34966:e=>{e.exports=JSON.parse('{"permalink":"/blog/moon-v1.17","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-11-20_moon-v1.17.mdx","source":"@site/blog/2023-11-20_moon-v1.17.mdx","title":"moon v1.17 - Full Bun support, TypeScript improvements, and more!","description":"In this release, we\'ve focused heavily on the JavaScript and TypeScript ecosystems, by improving our","date":"2023-11-20T00:00:00.000Z","tags":[{"inline":true,"label":"bun","permalink":"/blog/tags/bun"},{"inline":true,"label":"typescript","permalink":"/blog/tags/typescript"},{"inline":true,"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":4.74,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.17","title":"moon v1.17 - Full Bun support, TypeScript improvements, and more!","authors":["milesj"],"tags":["bun","typescript","javascript"],"image":"./img/moon/v1.17.png"},"unlisted":false,"prevItem":{"title":"proto v0.24 - Standardized configuration and 10x WASM boost","permalink":"/blog/proto-v0.24"},"nextItem":{"title":"proto v0.23 - New detection strategy, tool commands, and more","permalink":"/blog/proto-v0.23"}}')},43023:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var o=t(63696);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);