"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[31211],{26208:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"commands/migrate/from-package-json","title":"migrate from-package-json","description":"Use the moon migrate from-package-json  sub-command to migrate a project\'s package.json","source":"@site/docs/commands/migrate/from-package-json.mdx","sourceDirName":"commands/migrate","slug":"/commands/migrate/from-package-json","permalink":"/docs/commands/migrate/from-package-json","draft":false,"unlisted":false,"editUrl":"https://github.com/moonrepo/moon/tree/master/website/docs/commands/migrate/from-package-json.mdx","tags":[],"version":"current","frontMatter":{"title":"migrate from-package-json","sidebar_label":"from-package-json"},"sidebar":"docs","previous":{"title":"migrate","permalink":"/docs/commands/migrate"},"next":{"title":"from-turborepo","permalink":"/docs/commands/migrate/from-turborepo"}}');var r=s(62540),o=s(43023);const c={title:"migrate from-package-json",sidebar_label:"from-package-json"},i=void 0,a={},l=[{value:"Arguments",id:"arguments",level:3},{value:"Caveats",id:"caveats",level:2}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Use the ",(0,r.jsx)(n.code,{children:"moon migrate from-package-json <project>"})," sub-command to migrate a project's ",(0,r.jsx)(n.code,{children:"package.json"}),"\nto our ",(0,r.jsx)(n.a,{href:"../../config/project",children:(0,r.jsx)(n.code,{children:"moon.yml"})})," format. When ran, the following changes are made:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Converts ",(0,r.jsx)(n.code,{children:"package.json"})," scripts to ",(0,r.jsx)(n.code,{children:"moon.yml"})," ",(0,r.jsx)(n.a,{href:"../../config/project#tasks",children:"tasks"}),". Scripts and\ntasks are not 1:1, so we'll convert as close as possible while retaining functionality."]}),"\n",(0,r.jsxs)(n.li,{children:["Updates ",(0,r.jsx)(n.code,{children:"package.json"})," by removing all converted scripts. If all scripts were converted, the\nentire block is removed."]}),"\n",(0,r.jsxs)(n.li,{children:["Links ",(0,r.jsx)(n.code,{children:"package.json"})," dependencies as ",(0,r.jsx)(n.code,{children:"moon.yml"})," ",(0,r.jsx)(n.a,{href:"../../config/project#dependson",children:"dependencies"}),"\n(",(0,r.jsx)(n.code,{children:"dependsOn"}),"). Will map a package's name to their moon project name."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["This command is ran ",(0,r.jsx)(n.em,{children:"per project"}),", and for this to operate correctly, requires all\n",(0,r.jsx)(n.a,{href:"../../config/workspace#projects",children:"projects to be configured in the workspace"}),". There's also a\nhandful of ",(0,r.jsx)(n.a,{href:"#caveats",children:"requirements and caveats"})," to be aware of!"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"$ moon --log debug migrate from-package-json app\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsxs)(n.p,{children:["moon does its best to infer the ",(0,r.jsx)(n.a,{href:"../../config/project#local",children:(0,r.jsx)(n.code,{children:"local"})})," option, given the small amount\nof information available to use. When this option is incorrectly set, it'll result in CI\nenvironments hanging for tasks that are long-running or never-ending (development servers, etc), or\nwon't run builds that should be. Be sure to audit each task after migration!"]})}),"\n",(0,r.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<project>"})," - Name of a project, as defined in ",(0,r.jsx)(n.a,{href:"../../config/workspace#projects",children:(0,r.jsx)(n.code,{children:"projects"})}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"caveats",children:"Caveats"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["When running a script within another script, the full invocation of ",(0,r.jsx)(n.code,{children:"npm run ..."}),", ",(0,r.jsx)(n.code,{children:"pnpm run ..."}),",\nor ",(0,r.jsx)(n.code,{children:"yarn run ..."})," must be used. Shorthand variants are ",(0,r.jsx)(n.strong,{children:"not"})," supported, for example, ",(0,r.jsx)(n.code,{children:"npm test"}),"\nor ",(0,r.jsx)(n.code,{children:"yarn lint"})," or ",(0,r.jsx)(n.code,{children:"pnpm format"}),". We cannot guarantee that moon will parse these correctly\notherwise."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",metastring:'title="package.json"',children:'{\n\t// ...\n\t"scripts": {\n\t\t"lint": "eslint .",\n-\t\t"lint:fix": "yarn lint --fix",\n+\t\t"lint:fix": "yarn run lint --fix",\n\t}\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Scripts that run multiple commands with the AND operator (",(0,r.jsx)(n.code,{children:"&&"}),") will create an individual\ntransient task for each command, with all tasks linked ",(0,r.jsx)(n.em,{children:"in-order"})," using task\n",(0,r.jsx)(n.a,{href:"../../config/project#deps",children:(0,r.jsx)(n.code,{children:"deps"})}),". These commands ",(0,r.jsx)(n.em,{children:"will not"})," run in parallel. For example, given\nthe following script:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  // ...\n  "scripts": {\n    // ...\n    "check": "yarn run lint && yarn run test && yarn run typecheck"\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Would create 3 tasks that create the dependency chain:\n",(0,r.jsx)(n.code,{children:"check-dep1 (lint) -> check-dep2 (test) -> check (typecheck)"}),", instead of the expected parallel\nexecution of ",(0,r.jsx)(n.code,{children:"lint | test | typecheck -> check"}),". If you would prefer these commands to run in\nparallel, then you'll need to craft your tasks manually."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Scripts that change directory (",(0,r.jsx)(n.code,{children:"cd ..."}),"), use pipes (",(0,r.jsx)(n.code,{children:"|"}),"), redirects (",(0,r.jsx)(n.code,{children:">"}),"), or the OR operator\n(",(0,r.jsx)(n.code,{children:"||"}),") are ",(0,r.jsx)(n.strong,{children:"not"})," supported and will be skipped. Tasks and scripts are not 1:1 in functionality,\nas tasks represent that state of a single command execution. However, you can wrap this\nfunctionality in a\n",(0,r.jsx)(n.a,{href:"../../faq#how-to-pipe-or-redirect-tasks",children:"custom script that executes it on the task's behalf"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://docs.npmjs.com/cli/v8/using-npm/scripts#life-cycle-scripts",children:"Life cycle scripts"})," are\n",(0,r.jsx)(n.strong,{children:"not"})," converted to tasks and will remain in ",(0,r.jsx)(n.code,{children:"package.json"})," since they're required by npm (and\nother package managers). However, their commands ",(0,r.jsx)(n.em,{children:"will"})," be updated to execute moon commands when\napplicable."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",metastring:'title="package.json"',children:'{\n\t// ...\n\t"scripts": {\n-\t\t"preversion": "yarn run lint && yarn run test",\n+\t\t"preversion": "moon run project:lint && moon run project:test",\n\t}\n}\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["This ",(0,r.jsx)(n.em,{children:"does not"})," apply to ",(0,r.jsx)(n.code,{children:"run"}),", ",(0,r.jsx)(n.code,{children:"start"}),", ",(0,r.jsx)(n.code,{children:"stop"}),", and ",(0,r.jsx)(n.code,{children:"test"})," life cycles."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:['"Post" life cycles for\n',(0,r.jsx)(n.a,{href:"https://docs.npmjs.com/cli/v8/using-npm/scripts#npm-run-user-defined",children:"user defined scripts"}),' do\nnot work, as moon tasks have no concept of "run this after the task completes", so we suggest\n',(0,r.jsx)(n.em,{children:"against using these entirely"}),". However, we still convert the script and include the base script\nas a task dependency."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, a ",(0,r.jsx)(n.code,{children:"posttest"})," script would be converted into a ",(0,r.jsx)(n.code,{children:"posttest"})," task, with the ",(0,r.jsx)(n.code,{children:"test"})," task\nincluded in ",(0,r.jsx)(n.a,{href:"../../config/project#deps",children:(0,r.jsx)(n.code,{children:"deps"})}),". For this to actually run correctly, you'll need\nto use ",(0,r.jsx)(n.code,{children:"moon run <project>:posttest"})," AND NOT ",(0,r.jsx)(n.code,{children:"moon run <project>:test"}),"."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},43023:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>i});var t=s(63696);const r={},o=t.createContext(r);function c(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);