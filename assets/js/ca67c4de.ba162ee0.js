"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[56642],{3936:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var i=t(98203),o=t(62540),s=t(43023);const r={slug:"moon-v1.22",title:"moon v1.22 - Organizational settings, wildcard env var inputs, and Nx migration",authors:["milesj"],tags:["project","metadata","nx","migrate"],image:"./img/moon/v1.22.png"},a=void 0,l={image:t(55289).A,authorsImageUrls:[void 0]},c=[{value:"More organizational settings",id:"more-organizational-settings",level:2},{value:"New wildcard environment variable inputs",id:"new-wildcard-environment-variable-inputs",level:2},{value:"New <code>migrate-nx</code> extension",id:"new-migrate-nx-extension",level:2},{value:"Other changes",id:"other-changes",level:2}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"This release introduces new organizational settings for projects, a migrate from Nx extension, and\nmore."}),"\n",(0,o.jsx)(n.h2,{id:"more-organizational-settings",children:"More organizational settings"}),"\n",(0,o.jsx)(n.p,{children:"One aspect of moon that sets us apart from other build systems and tools, is that we have built-in\nsupport for human-readable project and task metadata. This is extremely useful in organizing and\nmanaging large repositories, especially when ownership comes into play. This information is also\nused for categorization and filtering for MQL and our editor extensions/plugins."}),"\n",(0,o.jsx)(n.p,{children:"To expand on this functionality even further, we're adding a few requests from the community, and\nthey are:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["New ",(0,o.jsx)(n.code,{children:"configuration"})," and ",(0,o.jsx)(n.code,{children:"scaffolding"})," variants for the project ",(0,o.jsx)(n.a,{href:"/docs/config/project#type",children:(0,o.jsx)(n.code,{children:"type"})}),"\nsetting in ",(0,o.jsx)(n.a,{href:"/docs/config/project",children:(0,o.jsx)(n.code,{children:"moon.yml"})}),". Perfect for contracts and templates."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"type: 'configuration'\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["New ",(0,o.jsx)(n.a,{href:"/docs/config/project#stack",children:(0,o.jsx)(n.code,{children:"stack"})})," setting in ",(0,o.jsx)(n.a,{href:"/docs/config/project",children:(0,o.jsx)(n.code,{children:"moon.yml"})}),", for\ncategorizing which tech stack the project belongs to. Supports ",(0,o.jsx)(n.code,{children:"frontend"}),", ",(0,o.jsx)(n.code,{children:"backend"}),",\n",(0,o.jsx)(n.code,{children:"infrastructure"}),", and ",(0,o.jsx)(n.code,{children:"systems"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"stack: 'frontend'\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["New ",(0,o.jsx)(n.a,{href:"/docs/config/project#description-1",children:(0,o.jsx)(n.code,{children:"description"})})," setting for tasks, that provides\nhuman-readable information."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"tasks:\n  build:\n    description: 'Builds the project using Vite'\n    command: 'vite build'\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"new-wildcard-environment-variable-inputs",children:"New wildcard environment variable inputs"}),"\n",(0,o.jsxs)(n.p,{children:["Task inputs have supported environment variables for quite a while now, but they are explicit, which\ncan be tedious too manage when you have many environment variables. To make this easier, we've added\nsupport for wildcard environment variables, denoted by a ",(0,o.jsx)(n.code,{children:"*"}),", which will match any environment\nvariable with that pattern."]}),"\n",(0,o.jsxs)(n.p,{children:["For example, say we want to track all Node.js and Vite environment variables that start with ",(0,o.jsx)(n.code,{children:"NODE_"}),"\nand ",(0,o.jsx)(n.code,{children:"VITE_"})," respectively, we can simply do:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"tasks:\n  build:\n    command: 'vite build'\n    inputs:\n      - '$NODE_*'\n      - '$VITE_*'\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Do note that this ",(0,o.jsx)(n.em,{children:"isn't"})," a glob, and the ",(0,o.jsx)(n.code,{children:"*"})," is merely a substitution for any character!"]}),"\n"]}),"\n",(0,o.jsxs)(n.h2,{id:"new-migrate-nx-extension",children:["New ",(0,o.jsx)(n.code,{children:"migrate-nx"})," extension"]}),"\n",(0,o.jsxs)(n.p,{children:["In our previous release, we added support for ",(0,o.jsx)(n.a,{href:"./moon-v1.21",children:"migrating from Turborepo"}),", but what\nabout Nx? Nx is a very popular build system with many users. A lot of our current moon users were\nformer Nx users, but unfortunately, they had to go through the tedious process of migrating\neverything manually. We wanted to make this process easier for new users, so we created a new\nexperimental extension to help with this process,\n",(0,o.jsx)(n.a,{href:"/docs/guides/extensions#migrate-nx",children:(0,o.jsx)(n.code,{children:"migrate-nx"})}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"$ moon ext migrate-nx\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This extension was quite complicated to implement, as Nx has a ",(0,o.jsx)(n.em,{children:"ton"})," of features. However, when the\nextension is executed, we'll convert the root ",(0,o.jsx)(n.code,{children:"nx.json"})," and ",(0,o.jsx)(n.code,{children:"workspace.json"})," files to\n",(0,o.jsx)(n.a,{href:"/docs/config/workspace",children:(0,o.jsx)(n.code,{children:".moon/workspace.yml"})})," and related top-level config files, and we'll also\nconvert every ",(0,o.jsx)(n.code,{children:"project.json"})," and ",(0,o.jsx)(n.code,{children:"package.json"})," (with an ",(0,o.jsx)(n.code,{children:"nx"})," block) into a\n",(0,o.jsx)(n.a,{href:"/docs/config/project",children:(0,o.jsx)(n.code,{children:"moon.yml"})})," file."]}),"\n",(0,o.jsxs)(n.p,{children:["Conversion is not a perfect 1:1, as moon and Nx are quite different. Please refer to the\n",(0,o.jsx)(n.a,{href:"/docs/guides/extensions#migrate-nx",children:"official documentation"})," for a list of unsupported settings and\nfeatures."]}),"\n",(0,o.jsxs)(n.admonition,{type:"info",children:[(0,o.jsx)(n.p,{children:"An awesome feature that didn't make it in time for this release, is an npm package for Nx\ncompatibility, that will allow Nx executors/plugins to be executed through moon, without the\nrequirement of Nx itself. This will allow for a seamless transition from Nx to moon, without the\nneed to change any of your existing Nx executors/plugins till later."}),(0,o.jsxs)(n.p,{children:["This functionality will be provided by our new\n",(0,o.jsxs)(n.a,{href:"https://github.com/moonrepo/moon/tree/master/packages/nx-compat",children:[(0,o.jsx)(n.code,{children:"@moonrepo/nx-compat"})," package"]}),",\nwhich we hope to finish in the coming weeks."]})]}),"\n",(0,o.jsx)(n.h2,{id:"other-changes",children:"Other changes"}),"\n",(0,o.jsxs)(n.p,{children:["View the ",(0,o.jsx)(n.a,{href:"https://github.com/moonrepo/moon/releases/tag/v1.22.0",children:"official release"})," for a full list\nof changes."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Added an ",(0,o.jsx)(n.code,{children:"installArgs"})," setting for bun/npm/pnpm/yarn in ",(0,o.jsx)(n.code,{children:".moon/toolchain.yml"}),", to customize the\nargs used when installing dependencies."]}),"\n",(0,o.jsxs)(n.li,{children:["Updated the ",(0,o.jsx)(n.code,{children:"envFile"})," task option to support a list of file paths."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},43023:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(63696);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}},55289:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/v1.22-e8cdf67b1495ffa6982cefd6b920b71a.png"},98203:e=>{e.exports=JSON.parse('{"permalink":"/blog/moon-v1.22","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-02-26_moon-v1.22.mdx","source":"@site/blog/2024-02-26_moon-v1.22.mdx","title":"moon v1.22 - Organizational settings, wildcard env var inputs, and Nx migration","description":"This release introduces new organizational settings for projects, a migrate from Nx extension, and","date":"2024-02-26T00:00:00.000Z","tags":[{"inline":true,"label":"project","permalink":"/blog/tags/project"},{"inline":true,"label":"metadata","permalink":"/blog/tags/metadata"},{"inline":true,"label":"nx","permalink":"/blog/tags/nx"},{"inline":true,"label":"migrate","permalink":"/blog/tags/migrate"}],"readingTime":3.05,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.22","title":"moon v1.22 - Organizational settings, wildcard env var inputs, and Nx migration","authors":["milesj"],"tags":["project","metadata","nx","migrate"],"image":"./img/moon/v1.22.png"},"unlisted":false,"prevItem":{"title":"proto v0.31 - Improved version pinning, removed global packages management, and more","permalink":"/blog/proto-v0.31"},"nextItem":{"title":"moon v1.21 - Deno tier 3, file group improvements, task shells, and more!","permalink":"/blog/moon-v1.21"}}')}}]);